
freertos_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e40  20000010  08006704  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e50  08006704  00024e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da13  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003724  00000000  00000000  0003da53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e8  00000000  00000000  00041178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003a43  00000000  00000000  00043fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c5e  00000000  00000000  00047a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fae67  00000000  00000000  0005b681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001564e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  00156564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800665c 	.word	0x0800665c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800665c 	.word	0x0800665c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbcc 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f837 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f929 	bl	8000774 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f8c9 	bl	80006b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 f8f7 	bl	8000718 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f003 fad7 	bl	8003adc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x60>)
 8000530:	2100      	movs	r1, #0
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <main+0x64>)
 8000534:	f003 fb3c 	bl	8003bb0 <osThreadNew>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x68>)
 800053c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTask1, (signed char *) "Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800053e:	2300      	movs	r3, #0
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	490c      	ldr	r1, [pc, #48]	; (800057c <main+0x6c>)
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <main+0x70>)
 800054e:	f004 fa41 	bl	80049d4 <xTaskCreate>
  xTaskCreate(vTask2, ( signed char * ) "Task2", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	4909      	ldr	r1, [pc, #36]	; (8000584 <main+0x74>)
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x78>)
 8000562:	f004 fa37 	bl	80049d4 <xTaskCreate>
  /* Запустить планировщик. Задачи начнут выполняться. */
  vTaskStartScheduler();
 8000566:	f004 fbb1 	bl	8004ccc <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056a:	f003 faeb 	bl	8003b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056e:	e7fe      	b.n	800056e <main+0x5e>
 8000570:	080066a8 	.word	0x080066a8
 8000574:	08000981 	.word	0x08000981
 8000578:	20004934 	.word	0x20004934
 800057c:	08006680 	.word	0x08006680
 8000580:	08000941 	.word	0x08000941
 8000584:	08006688 	.word	0x08006688
 8000588:	08000961 	.word	0x08000961

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b4      	sub	sp, #208	; 0xd0
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 f855 	bl	800664a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2284      	movs	r2, #132	; 0x84
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 f846 	bl	800664a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005be:	f000 ffcf 	bl	8001560 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <SystemClock_Config+0x120>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a39      	ldr	r2, [pc, #228]	; (80006ac <SystemClock_Config+0x120>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <SystemClock_Config+0x120>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <SystemClock_Config+0x124>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <SystemClock_Config+0x124>)
 80005e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <SystemClock_Config+0x124>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000614:	23d8      	movs	r3, #216	; 0xd8
 8000616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000620:	2309      	movs	r3, #9
 8000622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fff8 	bl	8001620 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000636:	f000 f9bd 	bl	80009b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800063a:	f000 ffa1 	bl	8001580 <HAL_PWREx_EnableOverDrive>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000644:	f000 f9b6 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800066a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800066e:	2107      	movs	r1, #7
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fa79 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800067c:	f000 f99a 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <SystemClock_Config+0x128>)
 8000682:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000684:	2300      	movs	r3, #0
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fc92 	bl	8001fbc <HAL_RCCEx_PeriphCLKConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800069e:	f000 f989 	bl	80009b4 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	37d0      	adds	r7, #208	; 0xd0
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000
 80006b4:	00200100 	.word	0x00200100

080006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART3_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006fc:	f002 fb2e 	bl	8002d5c <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f955 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20004938 	.word	0x20004938
 8000714:	40004800 	.word	0x40004800

08000718 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000726:	2206      	movs	r2, #6
 8000728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2201      	movs	r2, #1
 8000740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	f000 fdb7 	bl	80012ce <HAL_PCD_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f925 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200049bc 	.word	0x200049bc

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b67      	ldr	r3, [pc, #412]	; (8000928 <MX_GPIO_Init+0x1b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a66      	ldr	r2, [pc, #408]	; (8000928 <MX_GPIO_Init+0x1b4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b64      	ldr	r3, [pc, #400]	; (8000928 <MX_GPIO_Init+0x1b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b61      	ldr	r3, [pc, #388]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a60      	ldr	r2, [pc, #384]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a5a      	ldr	r2, [pc, #360]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b58      	ldr	r3, [pc, #352]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b55      	ldr	r3, [pc, #340]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a54      	ldr	r2, [pc, #336]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b52      	ldr	r3, [pc, #328]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a4e      	ldr	r2, [pc, #312]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <MX_GPIO_Init+0x1b4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b49      	ldr	r3, [pc, #292]	; (8000928 <MX_GPIO_Init+0x1b4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a48      	ldr	r2, [pc, #288]	; (8000928 <MX_GPIO_Init+0x1b4>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b46      	ldr	r3, [pc, #280]	; (8000928 <MX_GPIO_Init+0x1b4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000820:	4842      	ldr	r0, [pc, #264]	; (800092c <MX_GPIO_Init+0x1b8>)
 8000822:	f000 fd21 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4841      	ldr	r0, [pc, #260]	; (8000930 <MX_GPIO_Init+0x1bc>)
 800082c:	f000 fd1c 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <MX_GPIO_Init+0x1c0>)
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	483c      	ldr	r0, [pc, #240]	; (8000938 <MX_GPIO_Init+0x1c4>)
 8000846:	f000 fb65 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800084a:	2332      	movs	r3, #50	; 0x32
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085a:	230b      	movs	r3, #11
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4834      	ldr	r0, [pc, #208]	; (8000938 <MX_GPIO_Init+0x1c4>)
 8000866:	f000 fb55 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800086a:	2386      	movs	r3, #134	; 0x86
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087a:	230b      	movs	r3, #11
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x1c8>)
 8000886:	f000 fb45 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800088a:	f244 0381 	movw	r3, #16513	; 0x4081
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4822      	ldr	r0, [pc, #136]	; (800092c <MX_GPIO_Init+0x1b8>)
 80008a4:	f000 fb36 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ba:	230b      	movs	r3, #11
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <MX_GPIO_Init+0x1b8>)
 80008c6:	f000 fb25 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <MX_GPIO_Init+0x1bc>)
 80008e2:	f000 fb17 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0x1bc>)
 80008fa:	f000 fb0b 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0x1bc>)
 800091c:	f000 fafa 	bl	8000f14 <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	; 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	10110000 	.word	0x10110000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000

08000940 <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1( void *pvParameters )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	volatile unsigned long ul;
	/* Как и большинство задач, эта задача содержит
	/* бесконечный цикл */
	for( ;; ){

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000948:	2101      	movs	r1, #1
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <vTask1+0x1c>)
 800094c:	f000 fca5 	bl	800129a <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000954:	f003 f9d2 	bl	8003cfc <osDelay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000958:	e7f6      	b.n	8000948 <vTask1+0x8>
 800095a:	bf00      	nop
 800095c:	40020400 	.word	0x40020400

08000960 <vTask2>:
	/* заведомо не произойдет) */
	vTaskDelete( NULL );
}

void vTask2( void *pvParameters )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	volatile unsigned long ul;
	for( ;; ){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <vTask2+0x1c>)
 800096c:	f000 fc95 	bl	800129a <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f003 f9c2 	bl	8003cfc <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000978:	e7f6      	b.n	8000968 <vTask2+0x8>
 800097a:	bf00      	nop
 800097c:	40020400 	.word	0x40020400

08000980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f003 f9b7 	bl	8003cfc <osDelay>
 800098e:	e7fb      	b.n	8000988 <StartDefaultTask+0x8>

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a2:	f000 f993 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010000 	.word	0x40010000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ba:	e7fe      	b.n	80009ba <Error_Handler+0x6>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fa61 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d128      	bne.n	8000a80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a70:	2307      	movs	r3, #7
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a7c:	f000 fa4a 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ab4:	d141      	bne.n	8000b3a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ace:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4817      	ldr	r0, [pc, #92]	; (8000b48 <HAL_PCD_MspInit+0xb4>)
 8000aec:	f000 fa12 	bl	8000f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <HAL_PCD_MspInit+0xb4>)
 8000b06:	f000 fa05 	bl	8000f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6353      	str	r3, [r2, #52]	; 0x34
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2019      	movs	r0, #25
 8000b62:	f000 f9ad 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b66:	2019      	movs	r0, #25
 8000b68:	f000 f9c6 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xa0>)
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xa0>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6453      	str	r3, [r2, #68]	; 0x44
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xa0>)
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f9e2 	bl	8001f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b94:	f001 f9cc 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bce:	f001 fde5 	bl	800279c <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bda:	f001 fe41 	bl	8002860 <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20004dc0 	.word	0x20004dc0
 8000bf8:	40010000 	.word	0x40010000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2e:	f001 fe8f 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20004dc0 	.word	0x20004dc0

08000c3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd7 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f005 fcad 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fc3d 	bl	8000510 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca4:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8000ca8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cac:	20004e50 	.word	0x20004e50

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>

08000cb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f8f7 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff45 	bl	8000b4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc2:	f7ff fe7b 	bl	80009bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20004e0c 	.word	0x20004e0c

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20004e0c 	.word	0x20004e0c

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_Delay+0x40>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	05fa0000 	.word	0x05fa0000

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e175      	b.n	8001220 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8164 	bne.w	800121a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d00b      	beq.n	8000f72 <HAL_GPIO_Init+0x5e>
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f66:	2b11      	cmp	r3, #17
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d130      	bne.n	8000fd4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 0201 	and.w	r2, r3, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x100>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b12      	cmp	r3, #18
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80be 	beq.w	800121a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b65      	ldr	r3, [pc, #404]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a64      	ldr	r2, [pc, #400]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b62      	ldr	r3, [pc, #392]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010b6:	4a60      	ldr	r2, [pc, #384]	; (8001238 <HAL_GPIO_Init+0x324>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a57      	ldr	r2, [pc, #348]	; (800123c <HAL_GPIO_Init+0x328>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d037      	beq.n	8001152 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a56      	ldr	r2, [pc, #344]	; (8001240 <HAL_GPIO_Init+0x32c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d031      	beq.n	800114e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a55      	ldr	r2, [pc, #340]	; (8001244 <HAL_GPIO_Init+0x330>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d02b      	beq.n	800114a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a54      	ldr	r2, [pc, #336]	; (8001248 <HAL_GPIO_Init+0x334>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d025      	beq.n	8001146 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <HAL_GPIO_Init+0x338>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01f      	beq.n	8001142 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_GPIO_Init+0x33c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x22a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_GPIO_Init+0x340>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x226>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a50      	ldr	r2, [pc, #320]	; (8001258 <HAL_GPIO_Init+0x344>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_GPIO_Init+0x348>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <HAL_GPIO_Init+0x34c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x21a>
 800112a:	2309      	movs	r3, #9
 800112c:	e012      	b.n	8001154 <HAL_GPIO_Init+0x240>
 800112e:	230a      	movs	r3, #10
 8001130:	e010      	b.n	8001154 <HAL_GPIO_Init+0x240>
 8001132:	2308      	movs	r3, #8
 8001134:	e00e      	b.n	8001154 <HAL_GPIO_Init+0x240>
 8001136:	2307      	movs	r3, #7
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x240>
 800113a:	2306      	movs	r3, #6
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x240>
 800113e:	2305      	movs	r3, #5
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x240>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x240>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x240>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x240>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x240>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001164:	4934      	ldr	r1, [pc, #208]	; (8001238 <HAL_GPIO_Init+0x324>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_GPIO_Init+0x350>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001196:	4a33      	ldr	r2, [pc, #204]	; (8001264 <HAL_GPIO_Init+0x350>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_GPIO_Init+0x350>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_GPIO_Init+0x350>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_GPIO_Init+0x350>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x350>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_GPIO_Init+0x350>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_GPIO_Init+0x350>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f ae86 	bls.w	8000f34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	3724      	adds	r7, #36	; 0x24
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40021c00 	.word	0x40021c00
 800125c:	40022000 	.word	0x40022000
 8001260:	40022400 	.word	0x40022400
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d0:	b08f      	sub	sp, #60	; 0x3c
 80012d2:	af0a      	add	r7, sp, #40	; 0x28
 80012d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e116      	b.n	800150e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fbca 	bl	8000a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f974 	bl	800360c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	687e      	ldr	r6, [r7, #4]
 800132c:	466d      	mov	r5, sp
 800132e:	f106 0410 	add.w	r4, r6, #16
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800133e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001342:	1d33      	adds	r3, r6, #4
 8001344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f002 f908 	bl	800355c <USB_CoreInit>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2202      	movs	r2, #2
 8001356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0d7      	b.n	800150e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f962 	bl	800362e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e04a      	b.n	8001406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	333d      	adds	r3, #61	; 0x3d
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	333c      	adds	r3, #60	; 0x3c
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	b298      	uxth	r0, r3
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3342      	adds	r3, #66	; 0x42
 80013ac:	4602      	mov	r2, r0
 80013ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	333f      	adds	r3, #63	; 0x3f
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3344      	adds	r3, #68	; 0x44
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3350      	adds	r3, #80	; 0x50
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3af      	bcc.n	8001370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e044      	b.n	80014a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3301      	adds	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3b5      	bcc.n	8001416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	687e      	ldr	r6, [r7, #4]
 80014b2:	466d      	mov	r5, sp
 80014b4:	f106 0410 	add.w	r4, r6, #16
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c8:	1d33      	adds	r3, r6, #4
 80014ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f002 f8d9 	bl	8003684 <USB_DevInit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e014      	b.n	800150e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d102      	bne.n	8001502 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f80b 	bl	8001518 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fa8b 	bl	8003a22 <USB_DevDisconnect>

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_PCDEx_ActivateLPM+0x44>)
 8001548:	4313      	orrs	r3, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	10000003 	.word	0x10000003

08001560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40007000 	.word	0x40007000

08001580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_PWREx_EnableOverDrive+0x98>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_PWREx_EnableOverDrive+0x98>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_PWREx_EnableOverDrive+0x98>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ae:	f7ff fba1 	bl	8000cf4 <HAL_GetTick>
 80015b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015b4:	e009      	b.n	80015ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b6:	f7ff fb9d 	bl	8000cf4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c4:	d901      	bls.n	80015ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e022      	b.n	8001610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d6:	d1ee      	bne.n	80015b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fb86 	bl	8000cf4 <HAL_GetTick>
 80015e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ea:	e009      	b.n	8001600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015ec:	f7ff fb82 	bl	8000cf4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015fa:	d901      	bls.n	8001600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e007      	b.n	8001610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800160c:	d1ee      	bne.n	80015ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e291      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001650:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x62>
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b8d      	ldr	r3, [pc, #564]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06c      	beq.n	8001750 <HAL_RCC_OscConfig+0x130>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d168      	bne.n	8001750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e26b      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x7a>
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a83      	ldr	r2, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_RCC_OscConfig+0xd8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x9c>
 80016a2:	4b7f      	ldr	r3, [pc, #508]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7e      	ldr	r2, [pc, #504]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b7c      	ldr	r3, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7b      	ldr	r2, [pc, #492]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e01d      	b.n	80016f8 <HAL_RCC_OscConfig+0xd8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a75      	ldr	r2, [pc, #468]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a72      	ldr	r2, [pc, #456]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0xd8>
 80016e0:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6b      	ldr	r2, [pc, #428]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff faf8 	bl	8000cf4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff faf4 	bl	8000cf4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e21f      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xe8>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fae4 	bl	8000cf4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fae0 	bl	8000cf4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e20b      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x110>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d069      	beq.n	8001832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175e:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x190>
 8001776:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x17a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1df      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	493d      	ldr	r1, [pc, #244]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e040      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa96 	bl	8000cf4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fa92 	bl	8000cf4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1bd      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4929      	ldr	r1, [pc, #164]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e018      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fa72 	bl	8000cf4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fa6e 	bl	8000cf4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e199      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d038      	beq.n	80018b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa4f 	bl	8000cf4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fa4b 	bl	8000cf4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e176      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x23a>
 8001878:	e01a      	b.n	80018b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 800187c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fa35 	bl	8000cf4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fa31 	bl	8000cf4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d903      	bls.n	80018a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e15c      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
 80018a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b91      	ldr	r3, [pc, #580]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a4 	beq.w	8001a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10d      	bne.n	80018e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a87      	ldr	r2, [pc, #540]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b82      	ldr	r3, [pc, #520]	; (8001af0 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7e      	ldr	r2, [pc, #504]	; (8001af0 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f9f9 	bl	8000cf4 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff f9f5 	bl	8000cf4 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e120      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x31a>
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	e02d      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x33c>
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a69      	ldr	r2, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a66      	ldr	r2, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	e01c      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x35e>
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a60      	ldr	r2, [pc, #384]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a5d      	ldr	r2, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	e00b      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f9a9 	bl	8000cf4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f9a5 	bl	8000cf4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0ce      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCC_OscConfig+0x386>
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff f993 	bl	8000cf4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff f98f 	bl	8000cf4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	4b40      	ldr	r3, [pc, #256]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a4 	beq.w	8001b58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d06b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d149      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f960 	bl	8000cf4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f95c 	bl	8000cf4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e087      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f930 	bl	8000cf4 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f92c 	bl	8000cf4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e057      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x478>
 8001ab6:	e04f      	b.n	8001b58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f916 	bl	8000cf4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff f912 	bl	8000cf4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e03d      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x4ac>
 8001aea:	e035      	b.n	8001b58 <HAL_RCC_OscConfig+0x538>
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x544>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d028      	beq.n	8001b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d121      	bne.n	8001b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d11a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d111      	bne.n	8001b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d0      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	4965      	ldr	r1, [pc, #404]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e073      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06b      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4936      	ldr	r1, [pc, #216]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c5c:	f7ff f84a 	bl	8000cf4 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7ff f846 	bl	8000cf4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e053      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d210      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 020f 	bic.w	r2, r3, #15
 8001ca2:	4922      	ldr	r1, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x1cc>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1d0>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1d4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff16 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	080066cc 	.word	0x080066cc
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d007      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x32>
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d008      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x38>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80b4 	bne.w	8001ed4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d6e:	60bb      	str	r3, [r7, #8]
      break;
 8001d70:	e0b3      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d74:	60bb      	str	r3, [r7, #8]
      break;
 8001d76:	e0b0      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d78:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04a      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	f04f 0400 	mov.w	r4, #0
 8001d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	ea03 0501 	and.w	r5, r3, r1
 8001da4:	ea04 0602 	and.w	r6, r4, r2
 8001da8:	4629      	mov	r1, r5
 8001daa:	4632      	mov	r2, r6
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	f04f 0400 	mov.w	r4, #0
 8001db4:	0154      	lsls	r4, r2, #5
 8001db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dba:	014b      	lsls	r3, r1, #5
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	1b49      	subs	r1, r1, r5
 8001dc2:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	0194      	lsls	r4, r2, #6
 8001dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd4:	018b      	lsls	r3, r1, #6
 8001dd6:	1a5b      	subs	r3, r3, r1
 8001dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	00e2      	lsls	r2, r4, #3
 8001de6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dea:	00d9      	lsls	r1, r3, #3
 8001dec:	460b      	mov	r3, r1
 8001dee:	4614      	mov	r4, r2
 8001df0:	195b      	adds	r3, r3, r5
 8001df2:	eb44 0406 	adc.w	r4, r4, r6
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	0262      	lsls	r2, r4, #9
 8001e00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e04:	0259      	lsls	r1, r3, #9
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f04f 0400 	mov.w	r4, #0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	f7fe f9fa 	bl	8000210 <__aeabi_uldivmod>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e049      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	f04f 0400 	mov.w	r4, #0
 8001e2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	ea03 0501 	and.w	r5, r3, r1
 8001e3a:	ea04 0602 	and.w	r6, r4, r2
 8001e3e:	4629      	mov	r1, r5
 8001e40:	4632      	mov	r2, r6
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	0154      	lsls	r4, r2, #5
 8001e4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e50:	014b      	lsls	r3, r1, #5
 8001e52:	4619      	mov	r1, r3
 8001e54:	4622      	mov	r2, r4
 8001e56:	1b49      	subs	r1, r1, r5
 8001e58:	eb62 0206 	sbc.w	r2, r2, r6
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	f04f 0400 	mov.w	r4, #0
 8001e64:	0194      	lsls	r4, r2, #6
 8001e66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e6a:	018b      	lsls	r3, r1, #6
 8001e6c:	1a5b      	subs	r3, r3, r1
 8001e6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	00e2      	lsls	r2, r4, #3
 8001e7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e80:	00d9      	lsls	r1, r3, #3
 8001e82:	460b      	mov	r3, r1
 8001e84:	4614      	mov	r4, r2
 8001e86:	195b      	adds	r3, r3, r5
 8001e88:	eb44 0406 	adc.w	r4, r4, r6
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	02a2      	lsls	r2, r4, #10
 8001e96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e9a:	0299      	lsls	r1, r3, #10
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f04f 0400 	mov.w	r4, #0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4623      	mov	r3, r4
 8001eae:	f7fe f9af 	bl	8000210 <__aeabi_uldivmod>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	60bb      	str	r3, [r7, #8]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ed6:	60bb      	str	r3, [r7, #8]
      break;
 8001ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eda:	68bb      	ldr	r3, [r7, #8]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a9b      	lsrs	r3, r3, #10
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	080066dc 	.word	0x080066dc

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f34:	f7ff ffdc 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0b5b      	lsrs	r3, r3, #13
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	080066dc 	.word	0x080066dc

08001f58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	220f      	movs	r2, #15
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_RCC_GetClockConfig+0x60>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d012      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fe4:	4b69      	ldr	r3, [pc, #420]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a68      	ldr	r2, [pc, #416]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fee:	6093      	str	r3, [r2, #8]
 8001ff0:	4b66      	ldr	r3, [pc, #408]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	4964      	ldr	r1, [pc, #400]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d017      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002016:	4b5d      	ldr	r3, [pc, #372]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	4959      	ldr	r1, [pc, #356]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d017      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	494a      	ldr	r1, [pc, #296]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 808b 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a39      	ldr	r2, [pc, #228]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a34      	ldr	r2, [pc, #208]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c4:	f7fe fe16 	bl	8000cf4 <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe fe12 	bl	8000cf4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e357      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d035      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d02e      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d114      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fdda 	bl	8000cf4 <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fdd6 	bl	8000cf4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e319      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002172:	d111      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002182:	400b      	ands	r3, r1
 8002184:	4901      	ldr	r1, [pc, #4]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
 800218a:	e00b      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
 8002194:	0ffffcff 	.word	0x0ffffcff
 8002198:	4bb1      	ldr	r3, [pc, #708]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4ab0      	ldr	r2, [pc, #704]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	4bae      	ldr	r3, [pc, #696]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	49ab      	ldr	r1, [pc, #684]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d010      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021c2:	4ba7      	ldr	r3, [pc, #668]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c8:	4aa5      	ldr	r2, [pc, #660]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021d2:	4ba3      	ldr	r3, [pc, #652]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	49a0      	ldr	r1, [pc, #640]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f0:	4b9b      	ldr	r3, [pc, #620]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fe:	4998      	ldr	r1, [pc, #608]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002212:	4b93      	ldr	r3, [pc, #588]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002220:	498f      	ldr	r1, [pc, #572]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002234:	4b8a      	ldr	r3, [pc, #552]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	4987      	ldr	r1, [pc, #540]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	497e      	ldr	r1, [pc, #504]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002278:	4b79      	ldr	r3, [pc, #484]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4976      	ldr	r1, [pc, #472]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229a:	4b71      	ldr	r3, [pc, #452]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f023 020c 	bic.w	r2, r3, #12
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	496d      	ldr	r1, [pc, #436]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4965      	ldr	r1, [pc, #404]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	495c      	ldr	r1, [pc, #368]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	4954      	ldr	r1, [pc, #336]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002322:	4b4f      	ldr	r3, [pc, #316]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	494b      	ldr	r1, [pc, #300]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	4943      	ldr	r1, [pc, #268]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	493a      	ldr	r1, [pc, #232]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002396:	4932      	ldr	r1, [pc, #200]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d011      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b8:	4929      	ldr	r1, [pc, #164]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c8:	d101      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	4919      	ldr	r1, [pc, #100]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241c:	4910      	ldr	r1, [pc, #64]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d006      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d9 	beq.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fc56 	bl	8000cf4 <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800244a:	e00b      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800244c:	f7fe fc52 	bl	8000cf4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d904      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e197      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ed      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d021      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11d      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002484:	4b64      	ldr	r3, [pc, #400]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002492:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002498:	0e1b      	lsrs	r3, r3, #24
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	019a      	lsls	r2, r3, #6
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	061b      	lsls	r3, r3, #24
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	071b      	lsls	r3, r3, #28
 80024b8:	4957      	ldr	r1, [pc, #348]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02e      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d129      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002500:	0f1b      	lsrs	r3, r3, #28
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	019a      	lsls	r2, r3, #6
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	431a      	orrs	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	071b      	lsls	r3, r3, #28
 8002520:	493d      	ldr	r1, [pc, #244]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800252a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252e:	f023 021f 	bic.w	r2, r3, #31
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01d      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002552:	0e1b      	lsrs	r3, r3, #24
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800255c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002560:	0f1b      	lsrs	r3, r3, #28
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	019a      	lsls	r2, r3, #6
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	431a      	orrs	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	071b      	lsls	r3, r3, #28
 8002580:	4925      	ldr	r1, [pc, #148]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	019a      	lsls	r2, r3, #6
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	041b      	lsls	r3, r3, #16
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	061b      	lsls	r3, r3, #24
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	071b      	lsls	r3, r3, #28
 80025b0:	4919      	ldr	r1, [pc, #100]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fb96 	bl	8000cf4 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025cc:	f7fe fb92 	bl	8000cf4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0d7      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 80cd 	bne.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fe:	f7fe fb79 	bl	8000cf4 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002606:	f7fe fb75 	bl	8000cf4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d903      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0ba      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002618:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d0ed      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02e      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d12a      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002652:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	0c1b      	lsrs	r3, r3, #16
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	0f1b      	lsrs	r3, r3, #28
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	019a      	lsls	r2, r3, #6
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	071b      	lsls	r3, r3, #28
 8002686:	4944      	ldr	r1, [pc, #272]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002694:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	493d      	ldr	r1, [pc, #244]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026bc:	d11d      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	0e1b      	lsrs	r3, r3, #24
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	0f1b      	lsrs	r3, r3, #28
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	019a      	lsls	r2, r3, #6
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	071b      	lsls	r3, r3, #28
 80026f2:	4929      	ldr	r1, [pc, #164]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d028      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	0e1b      	lsrs	r3, r3, #24
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	019a      	lsls	r2, r3, #6
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	431a      	orrs	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	071b      	lsls	r3, r3, #28
 800273a:	4917      	ldr	r1, [pc, #92]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	4911      	ldr	r1, [pc, #68]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fac6 	bl	8000cf4 <HAL_GetTick>
 8002768:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800276c:	f7fe fac2 	bl	8000cf4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e007      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278a:	d1ef      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e049      	b.n	8002842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f841 	bl	800284a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f000 fa00 	bl	8002be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e054      	b.n	8002922 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_TIM_Base_Start_IT+0xd0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d022      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d01d      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_TIM_Base_Start_IT+0xd4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_TIM_Base_Start_IT+0xd8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_TIM_Base_Start_IT+0xdc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_TIM_Base_Start_IT+0xe0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_TIM_Base_Start_IT+0xe4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_TIM_Base_Start_IT+0xe8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d115      	bne.n	800290c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_TIM_Base_Start_IT+0xec>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d015      	beq.n	800291e <HAL_TIM_Base_Start_IT+0xbe>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d011      	beq.n	800291e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	e008      	b.n	800291e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e000      	b.n	8002920 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40010400 	.word	0x40010400
 8002944:	40014000 	.word	0x40014000
 8002948:	40001800 	.word	0x40001800
 800294c:	00010007 	.word	0x00010007

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0202 	mvn.w	r2, #2
 800297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f905 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8f7 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f908 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0204 	mvn.w	r2, #4
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8db 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8cd 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f8de 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0208 	mvn.w	r2, #8
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8b1 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8a3 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8b4 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0210 	mvn.w	r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f887 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f879 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f88a 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0201 	mvn.w	r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd ff5e 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f91a 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d10e      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f90d 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d10e      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d107      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f838 	bl	8002bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d10e      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0220 	mvn.w	r2, #32
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8cd 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d00f      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <TIM_Base_SetConfig+0x118>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d027      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <TIM_Base_SetConfig+0x118>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d023      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01b      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d017      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00f      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <TIM_Base_SetConfig+0x130>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <TIM_Base_SetConfig+0x134>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <TIM_Base_SetConfig+0x138>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <TIM_Base_SetConfig+0x13c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0xf8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	615a      	str	r2, [r3, #20]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800
 8002d14:	40001800 	.word	0x40001800
 8002d18:	40001c00 	.word	0x40001c00
 8002d1c:	40002000 	.word	0x40002000

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e040      	b.n	8002df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd fe44 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f82c 	bl	8002df8 <UART_SetConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa80 	bl	80032b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fb07 	bl	80033fc <UART_CheckIdleState>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4bb1      	ldr	r3, [pc, #708]	; (80030e8 <UART_SetConfig+0x2f0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a9f      	ldr	r2, [pc, #636]	; (80030ec <UART_SetConfig+0x2f4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d121      	bne.n	8002eb8 <UART_SetConfig+0xc0>
 8002e74:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d816      	bhi.n	8002eb0 <UART_SetConfig+0xb8>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <UART_SetConfig+0x90>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002ea5 	.word	0x08002ea5
 8002e90:	08002e9f 	.word	0x08002e9f
 8002e94:	08002eab 	.word	0x08002eab
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e151      	b.n	8003142 <UART_SetConfig+0x34a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e14e      	b.n	8003142 <UART_SetConfig+0x34a>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e14b      	b.n	8003142 <UART_SetConfig+0x34a>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e148      	b.n	8003142 <UART_SetConfig+0x34a>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	bf00      	nop
 8002eb6:	e144      	b.n	8003142 <UART_SetConfig+0x34a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a8d      	ldr	r2, [pc, #564]	; (80030f4 <UART_SetConfig+0x2fc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d134      	bne.n	8002f2c <UART_SetConfig+0x134>
 8002ec2:	4b8b      	ldr	r3, [pc, #556]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d829      	bhi.n	8002f24 <UART_SetConfig+0x12c>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0xe0>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f25 	.word	0x08002f25
 8002ee0:	08002f25 	.word	0x08002f25
 8002ee4:	08002f25 	.word	0x08002f25
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f25 	.word	0x08002f25
 8002ef0:	08002f25 	.word	0x08002f25
 8002ef4:	08002f25 	.word	0x08002f25
 8002ef8:	08002f13 	.word	0x08002f13
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f25 	.word	0x08002f25
 8002f08:	08002f1f 	.word	0x08002f1f
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e117      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f12:	2302      	movs	r3, #2
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e114      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e111      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e10e      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f24:	2310      	movs	r3, #16
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	bf00      	nop
 8002f2a:	e10a      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a71      	ldr	r2, [pc, #452]	; (80030f8 <UART_SetConfig+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d120      	bne.n	8002f78 <UART_SetConfig+0x180>
 8002f36:	4b6e      	ldr	r3, [pc, #440]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d00f      	beq.n	8002f64 <UART_SetConfig+0x16c>
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d802      	bhi.n	8002f4e <UART_SetConfig+0x156>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <UART_SetConfig+0x160>
 8002f4c:	e010      	b.n	8002f70 <UART_SetConfig+0x178>
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d005      	beq.n	8002f5e <UART_SetConfig+0x166>
 8002f52:	2b30      	cmp	r3, #48	; 0x30
 8002f54:	d009      	beq.n	8002f6a <UART_SetConfig+0x172>
 8002f56:	e00b      	b.n	8002f70 <UART_SetConfig+0x178>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e0f1      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e0ee      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e0eb      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e0e8      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	bf00      	nop
 8002f76:	e0e4      	b.n	8003142 <UART_SetConfig+0x34a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5f      	ldr	r2, [pc, #380]	; (80030fc <UART_SetConfig+0x304>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d120      	bne.n	8002fc4 <UART_SetConfig+0x1cc>
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d00f      	beq.n	8002fb0 <UART_SetConfig+0x1b8>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d802      	bhi.n	8002f9a <UART_SetConfig+0x1a2>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0x1ac>
 8002f98:	e010      	b.n	8002fbc <UART_SetConfig+0x1c4>
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d005      	beq.n	8002faa <UART_SetConfig+0x1b2>
 8002f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa0:	d009      	beq.n	8002fb6 <UART_SetConfig+0x1be>
 8002fa2:	e00b      	b.n	8002fbc <UART_SetConfig+0x1c4>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0cb      	b.n	8003142 <UART_SetConfig+0x34a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0c8      	b.n	8003142 <UART_SetConfig+0x34a>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0c5      	b.n	8003142 <UART_SetConfig+0x34a>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0c2      	b.n	8003142 <UART_SetConfig+0x34a>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	bf00      	nop
 8002fc2:	e0be      	b.n	8003142 <UART_SetConfig+0x34a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4d      	ldr	r2, [pc, #308]	; (8003100 <UART_SetConfig+0x308>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d124      	bne.n	8003018 <UART_SetConfig+0x220>
 8002fce:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d012      	beq.n	8003004 <UART_SetConfig+0x20c>
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d802      	bhi.n	8002fea <UART_SetConfig+0x1f2>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <UART_SetConfig+0x200>
 8002fe8:	e012      	b.n	8003010 <UART_SetConfig+0x218>
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d006      	beq.n	8002ffe <UART_SetConfig+0x206>
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d009      	beq.n	800300a <UART_SetConfig+0x212>
 8002ff6:	e00b      	b.n	8003010 <UART_SetConfig+0x218>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e0a1      	b.n	8003142 <UART_SetConfig+0x34a>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e09e      	b.n	8003142 <UART_SetConfig+0x34a>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e09b      	b.n	8003142 <UART_SetConfig+0x34a>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e098      	b.n	8003142 <UART_SetConfig+0x34a>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	bf00      	nop
 8003016:	e094      	b.n	8003142 <UART_SetConfig+0x34a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a39      	ldr	r2, [pc, #228]	; (8003104 <UART_SetConfig+0x30c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d124      	bne.n	800306c <UART_SetConfig+0x274>
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <UART_SetConfig+0x2f8>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d012      	beq.n	8003058 <UART_SetConfig+0x260>
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d802      	bhi.n	800303e <UART_SetConfig+0x246>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <UART_SetConfig+0x254>
 800303c:	e012      	b.n	8003064 <UART_SetConfig+0x26c>
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d006      	beq.n	8003052 <UART_SetConfig+0x25a>
 8003044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003048:	d009      	beq.n	800305e <UART_SetConfig+0x266>
 800304a:	e00b      	b.n	8003064 <UART_SetConfig+0x26c>
 800304c:	2301      	movs	r3, #1
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e077      	b.n	8003142 <UART_SetConfig+0x34a>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e074      	b.n	8003142 <UART_SetConfig+0x34a>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e071      	b.n	8003142 <UART_SetConfig+0x34a>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e06e      	b.n	8003142 <UART_SetConfig+0x34a>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	bf00      	nop
 800306a:	e06a      	b.n	8003142 <UART_SetConfig+0x34a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a25      	ldr	r2, [pc, #148]	; (8003108 <UART_SetConfig+0x310>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d124      	bne.n	80030c0 <UART_SetConfig+0x2c8>
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <UART_SetConfig+0x2f8>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d012      	beq.n	80030ac <UART_SetConfig+0x2b4>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	d802      	bhi.n	8003092 <UART_SetConfig+0x29a>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <UART_SetConfig+0x2a8>
 8003090:	e012      	b.n	80030b8 <UART_SetConfig+0x2c0>
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	d006      	beq.n	80030a6 <UART_SetConfig+0x2ae>
 8003098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800309c:	d009      	beq.n	80030b2 <UART_SetConfig+0x2ba>
 800309e:	e00b      	b.n	80030b8 <UART_SetConfig+0x2c0>
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e04d      	b.n	8003142 <UART_SetConfig+0x34a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e04a      	b.n	8003142 <UART_SetConfig+0x34a>
 80030ac:	2304      	movs	r3, #4
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e047      	b.n	8003142 <UART_SetConfig+0x34a>
 80030b2:	2308      	movs	r3, #8
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e044      	b.n	8003142 <UART_SetConfig+0x34a>
 80030b8:	2310      	movs	r3, #16
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	bf00      	nop
 80030be:	e040      	b.n	8003142 <UART_SetConfig+0x34a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <UART_SetConfig+0x314>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d139      	bne.n	800313e <UART_SetConfig+0x346>
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <UART_SetConfig+0x2f8>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d8:	d027      	beq.n	800312a <UART_SetConfig+0x332>
 80030da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030de:	d817      	bhi.n	8003110 <UART_SetConfig+0x318>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01c      	beq.n	800311e <UART_SetConfig+0x326>
 80030e4:	e027      	b.n	8003136 <UART_SetConfig+0x33e>
 80030e6:	bf00      	nop
 80030e8:	efff69f3 	.word	0xefff69f3
 80030ec:	40011000 	.word	0x40011000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40004400 	.word	0x40004400
 80030f8:	40004800 	.word	0x40004800
 80030fc:	40004c00 	.word	0x40004c00
 8003100:	40005000 	.word	0x40005000
 8003104:	40011400 	.word	0x40011400
 8003108:	40007800 	.word	0x40007800
 800310c:	40007c00 	.word	0x40007c00
 8003110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003114:	d006      	beq.n	8003124 <UART_SetConfig+0x32c>
 8003116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800311a:	d009      	beq.n	8003130 <UART_SetConfig+0x338>
 800311c:	e00b      	b.n	8003136 <UART_SetConfig+0x33e>
 800311e:	2300      	movs	r3, #0
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e00e      	b.n	8003142 <UART_SetConfig+0x34a>
 8003124:	2302      	movs	r3, #2
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e00b      	b.n	8003142 <UART_SetConfig+0x34a>
 800312a:	2304      	movs	r3, #4
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e008      	b.n	8003142 <UART_SetConfig+0x34a>
 8003130:	2308      	movs	r3, #8
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e005      	b.n	8003142 <UART_SetConfig+0x34a>
 8003136:	2310      	movs	r3, #16
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	bf00      	nop
 800313c:	e001      	b.n	8003142 <UART_SetConfig+0x34a>
 800313e:	2310      	movs	r3, #16
 8003140:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314a:	d15b      	bne.n	8003204 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800314c:	7ffb      	ldrb	r3, [r7, #31]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d827      	bhi.n	80031a2 <UART_SetConfig+0x3aa>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x360>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe fec4 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003180:	61b8      	str	r0, [r7, #24]
        break;
 8003182:	e013      	b.n	80031ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7fe fed4 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8003188:	61b8      	str	r0, [r7, #24]
        break;
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <UART_SetConfig+0x4bc>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e00c      	b.n	80031ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fdd5 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8003196:	61b8      	str	r0, [r7, #24]
        break;
 8003198:	e008      	b.n	80031ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e004      	b.n	80031ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77bb      	strb	r3, [r7, #30]
        break;
 80031aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d074      	beq.n	800329c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	005a      	lsls	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d916      	bls.n	80031fe <UART_SetConfig+0x406>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d212      	bcs.n	80031fe <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f023 030f 	bic.w	r3, r3, #15
 80031e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	89fa      	ldrh	r2, [r7, #14]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e04e      	b.n	800329c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	77bb      	strb	r3, [r7, #30]
 8003202:	e04b      	b.n	800329c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d827      	bhi.n	800325a <UART_SetConfig+0x462>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <UART_SetConfig+0x418>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003235 	.word	0x08003235
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003245 	.word	0x08003245
 800321c:	0800325b 	.word	0x0800325b
 8003220:	0800324b 	.word	0x0800324b
 8003224:	0800325b 	.word	0x0800325b
 8003228:	0800325b 	.word	0x0800325b
 800322c:	0800325b 	.word	0x0800325b
 8003230:	08003253 	.word	0x08003253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7fe fe68 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003238:	61b8      	str	r0, [r7, #24]
        break;
 800323a:	e013      	b.n	8003264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7fe fe78 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8003240:	61b8      	str	r0, [r7, #24]
        break;
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <UART_SetConfig+0x4bc>)
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e00c      	b.n	8003264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7fe fd79 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 800324e:	61b8      	str	r0, [r7, #24]
        break;
 8003250:	e008      	b.n	8003264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e004      	b.n	8003264 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	77bb      	strb	r3, [r7, #30]
        break;
 8003262:	bf00      	nop
    }

    if (pclk != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	085a      	lsrs	r2, r3, #1
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	b29b      	uxth	r3, r3
 800327e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d908      	bls.n	8003298 <UART_SetConfig+0x4a0>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d204      	bcs.n	8003298 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e001      	b.n	800329c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	00f42400 	.word	0x00f42400

080032b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01a      	beq.n	80033ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b6:	d10a      	bne.n	80033ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800340c:	f7fd fc72 	bl	8000cf4 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b08      	cmp	r3, #8
 800341e:	d10e      	bne.n	800343e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f817 	bl	8003462 <UART_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00d      	b.n	800345a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	e05e      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d05a      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7fd fc3a 	bl	8000cf4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <UART_WaitOnFlagUntilTimeout+0x30>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11b      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e043      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02c      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e6:	d124      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003500:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e00f      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d091      	beq.n	8003474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800355c:	b084      	sub	sp, #16
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	f107 001c 	add.w	r0, r7, #28
 800356a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2b01      	cmp	r3, #1
 8003572:	d120      	bne.n	80035b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <USB_CoreInit+0xac>)
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa5a 	bl	8003a64 <USB_CoreReset>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e010      	b.n	80035d8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa4e 	bl	8003a64 <USB_CoreReset>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10b      	bne.n	80035f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f043 0206 	orr.w	r2, r3, #6
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003602:	b004      	add	sp, #16
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	ffbdffbf 	.word	0xffbdffbf

0800360c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 0201 	bic.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	e00b      	b.n	8003672 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e001      	b.n	8003672 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e003      	b.n	800367a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003672:	2032      	movs	r0, #50	; 0x32
 8003674:	f7fd fb4a 	bl	8000d0c <HAL_Delay>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003684:	b084      	sub	sp, #16
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e009      	b.n	80036b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3340      	adds	r3, #64	; 0x40
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0e      	cmp	r3, #14
 80036bc:	d9f2      	bls.n	80036a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11c      	bne.n	80036fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e005      	b.n	800370a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371c:	4619      	mov	r1, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	461a      	mov	r2, r3
 8003726:	680b      	ldr	r3, [r1, #0]
 8003728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10c      	bne.n	800374a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003736:	2100      	movs	r1, #0
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f959 	bl	80039f0 <USB_SetDevSpeed>
 800373e:	e018      	b.n	8003772 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003740:	2101      	movs	r1, #1
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f954 	bl	80039f0 <USB_SetDevSpeed>
 8003748:	e013      	b.n	8003772 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	2b03      	cmp	r3, #3
 800374e:	d10c      	bne.n	800376a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d104      	bne.n	8003760 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f949 	bl	80039f0 <USB_SetDevSpeed>
 800375e:	e008      	b.n	8003772 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003760:	2101      	movs	r1, #1
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f944 	bl	80039f0 <USB_SetDevSpeed>
 8003768:	e003      	b.n	8003772 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800376a:	2103      	movs	r1, #3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f93f 	bl	80039f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003772:	2110      	movs	r1, #16
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8f3 	bl	8003960 <USB_FlushTxFifo>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f911 	bl	80039ac <USB_FlushRxFifo>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	e043      	b.n	8003846 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d4:	d118      	bne.n	8003808 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	461a      	mov	r2, r3
 80037ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e013      	b.n	800381a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	461a      	mov	r2, r3
 8003800:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e008      	b.n	800381a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003838:	461a      	mov	r2, r3
 800383a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800383e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3301      	adds	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3b7      	bcc.n	80037be <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e043      	b.n	80038dc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800386a:	d118      	bne.n	800389e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e013      	b.n	80038b0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	e008      	b.n	80038b0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3301      	adds	r3, #1
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3b7      	bcc.n	8003854 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <USB_DevInit+0x2d4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f043 0208 	orr.w	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <USB_DevInit+0x2d8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003954:	b004      	add	sp, #16
 8003956:	4770      	bx	lr
 8003958:	803c3800 	.word	0x803c3800
 800395c:	40000004 	.word	0x40000004

08003960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <USB_FlushTxFifo+0x48>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e006      	b.n	800399a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d0f0      	beq.n	800397a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	00030d40 	.word	0x00030d40

080039ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2210      	movs	r2, #16
 80039bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <USB_FlushRxFifo+0x40>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e006      	b.n	80039de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d0f0      	beq.n	80039be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	00030d40 	.word	0x00030d40

080039f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a3c:	f023 0303 	bic.w	r3, r3, #3
 8003a40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <USB_CoreReset+0x64>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e01b      	b.n	8003aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	daf2      	bge.n	8003a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <USB_CoreReset+0x64>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e006      	b.n	8003aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d0f0      	beq.n	8003a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	00030d40 	.word	0x00030d40

08003acc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
 8003ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	607b      	str	r3, [r7, #4]
  return(result);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afa:	f3ef 8311 	mrs	r3, BASEPRI
 8003afe:	603b      	str	r3, [r7, #0]
  return(result);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <osKernelInitialize+0x3a>
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <osKernelInitialize+0x64>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e00c      	b.n	8003b30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <osKernelInitialize+0x64>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <osKernelInitialize+0x64>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e002      	b.n	8003b30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	2000002c 	.word	0x2000002c

08003b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4a:	f3ef 8305 	mrs	r3, IPSR
 8003b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b56:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5a:	607b      	str	r3, [r7, #4]
  return(result);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b62:	f3ef 8311 	mrs	r3, BASEPRI
 8003b66:	603b      	str	r3, [r7, #0]
  return(result);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <osKernelStart+0x3a>
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <osKernelStart+0x68>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d103      	bne.n	8003b7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b76:	f06f 0305 	mvn.w	r3, #5
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e010      	b.n	8003ba0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <osKernelStart+0x68>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d109      	bne.n	8003b9a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b86:	f7ff ffa1 	bl	8003acc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <osKernelStart+0x68>)
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b90:	f001 f89c 	bl	8004ccc <vTaskStartScheduler>
      stat = osOK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e002      	b.n	8003ba0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000002c 	.word	0x2000002c

08003bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b090      	sub	sp, #64	; 0x40
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc0:	f3ef 8305 	mrs	r3, IPSR
 8003bc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 808f 	bne.w	8003cec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bce:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bda:	f3ef 8311 	mrs	r3, BASEPRI
 8003bde:	617b      	str	r3, [r7, #20]
  return(result);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <osThreadNew+0x3e>
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <osThreadNew+0x148>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d07e      	beq.n	8003cec <osThreadNew+0x13c>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d07b      	beq.n	8003cec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003bf8:	2318      	movs	r3, #24
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d045      	beq.n	8003c98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <osThreadNew+0x6a>
        name = attr->name;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <osThreadNew+0x90>
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	2b38      	cmp	r3, #56	; 0x38
 8003c32:	d805      	bhi.n	8003c40 <osThreadNew+0x90>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <osThreadNew+0x94>
        return (NULL);
 8003c40:	2300      	movs	r3, #0
 8003c42:	e054      	b.n	8003cee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <osThreadNew+0xca>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b5b      	cmp	r3, #91	; 0x5b
 8003c62:	d90a      	bls.n	8003c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d006      	beq.n	8003c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <osThreadNew+0xca>
        mem = 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	e010      	b.n	8003c9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <osThreadNew+0xec>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <osThreadNew+0xec>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <osThreadNew+0xec>
          mem = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	e001      	b.n	8003c9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d110      	bne.n	8003cc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003caa:	9202      	str	r2, [sp, #8]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fe2b 	bl	8004914 <xTaskCreateStatic>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e013      	b.n	8003cec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d110      	bne.n	8003cec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fe79 	bl	80049d4 <xTaskCreate>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <osThreadNew+0x13c>
          hTask = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cec:	693b      	ldr	r3, [r7, #16]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3730      	adds	r7, #48	; 0x30
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000002c 	.word	0x2000002c

08003cfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d04:	f3ef 8305 	mrs	r3, IPSR
 8003d08:	613b      	str	r3, [r7, #16]
  return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <osDelay+0x3c>
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <osDelay+0x58>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d103      	bne.n	8003d38 <osDelay+0x3c>
    stat = osErrorISR;
 8003d30:	f06f 0305 	mvn.w	r3, #5
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e007      	b.n	8003d48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 ff8c 	bl	8004c60 <vTaskDelay>
    }
  }

  return (stat);
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000002c 	.word	0x2000002c

08003d58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <vApplicationGetIdleTaskMemory+0x30>)
 8003d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000030 	.word	0x20000030
 8003d88:	2000008c 	.word	0x2000008c

08003d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a06      	ldr	r2, [pc, #24]	; (8003dbc <vApplicationGetTimerTaskMemory+0x30>)
 8003da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003daa:	601a      	str	r2, [r3, #0]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	2000028c 	.word	0x2000028c
 8003dbc:	200002e8 	.word	0x200002e8

08003dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 0208 	add.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f103 0208 	add.w	r2, r3, #8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f103 0208 	add.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d103      	bne.n	8003e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e00c      	b.n	8003e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3308      	adds	r3, #8
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e002      	b.n	8003e90 <vListInsert+0x2e>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d2f6      	bcs.n	8003e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6892      	ldr	r2, [r2, #8]
 8003eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6852      	ldr	r2, [r2, #4]
 8003ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d103      	bne.n	8003f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	b672      	cpsid	i
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	b662      	cpsie	i
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003f54:	f002 f848 	bl	8005fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	441a      	add	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	3b01      	subs	r3, #1
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	441a      	add	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	22ff      	movs	r2, #255	; 0xff
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	22ff      	movs	r2, #255	; 0xff
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d114      	bne.n	8003fd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01a      	beq.n	8003fe8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3310      	adds	r3, #16
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f916 	bl	80051e8 <xTaskRemoveFromEventList>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <xQueueGenericReset+0xd0>)
 8003fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	e009      	b.n	8003fe8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3310      	adds	r3, #16
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fef1 	bl	8003dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff feec 	bl	8003dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fe8:	f002 f830 	bl	800604c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueGenericCreateStatic+0x2c>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	b672      	cpsid	i
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	b662      	cpsie	i
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	e7fe      	b.n	8004026 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <xQueueGenericCreateStatic+0x4a>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	e7fe      	b.n	8004044 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <xQueueGenericCreateStatic+0x56>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <xQueueGenericCreateStatic+0x5a>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <xQueueGenericCreateStatic+0x5c>
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <xQueueGenericCreateStatic+0x78>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	b672      	cpsid	i
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	b662      	cpsie	i
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	e7fe      	b.n	8004072 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <xQueueGenericCreateStatic+0x84>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xQueueGenericCreateStatic+0x88>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <xQueueGenericCreateStatic+0x8a>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <xQueueGenericCreateStatic+0xa6>
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	b672      	cpsid	i
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	b662      	cpsie	i
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040a2:	2350      	movs	r3, #80	; 0x50
 80040a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d00b      	beq.n	80040c4 <xQueueGenericCreateStatic+0xc8>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	b672      	cpsid	i
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	b662      	cpsie	i
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e7fe      	b.n	80040c2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f805 	bl	80040f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3730      	adds	r7, #48	; 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e002      	b.n	8004118 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004124:	2101      	movs	r1, #1
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f7ff fefe 	bl	8003f28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800414a:	2300      	movs	r3, #0
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericSend+0x34>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	b672      	cpsid	i
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	b662      	cpsie	i
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
 800416e:	e7fe      	b.n	800416e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <xQueueGenericSend+0x42>
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <xQueueGenericSend+0x46>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <xQueueGenericSend+0x48>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <xQueueGenericSend+0x64>
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	b672      	cpsid	i
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	b662      	cpsie	i
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e7fe      	b.n	800419e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d103      	bne.n	80041ae <xQueueGenericSend+0x72>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <xQueueGenericSend+0x76>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <xQueueGenericSend+0x78>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <xQueueGenericSend+0x94>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	b672      	cpsid	i
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	b662      	cpsie	i
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	e7fe      	b.n	80041ce <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d0:	f001 f9c8 	bl	8005564 <xTaskGetSchedulerState>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <xQueueGenericSend+0xa4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <xQueueGenericSend+0xa8>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <xQueueGenericSend+0xaa>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <xQueueGenericSend+0xc6>
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	b672      	cpsid	i
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	b662      	cpsie	i
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e7fe      	b.n	8004200 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004202:	f001 fef1 	bl	8005fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <xQueueGenericSend+0xdc>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d129      	bne.n	800426c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421e:	f000 fa0d 	bl	800463c <prvCopyDataToQueue>
 8004222:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	3324      	adds	r3, #36	; 0x24
 8004230:	4618      	mov	r0, r3
 8004232:	f000 ffd9 	bl	80051e8 <xTaskRemoveFromEventList>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800423c:	4b3f      	ldr	r3, [pc, #252]	; (800433c <xQueueGenericSend+0x200>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	e00a      	b.n	8004264 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004254:	4b39      	ldr	r3, [pc, #228]	; (800433c <xQueueGenericSend+0x200>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004264:	f001 fef2 	bl	800604c <vPortExitCritical>
				return pdPASS;
 8004268:	2301      	movs	r3, #1
 800426a:	e063      	b.n	8004334 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004272:	f001 feeb 	bl	800604c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004276:	2300      	movs	r3, #0
 8004278:	e05c      	b.n	8004334 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f813 	bl	80052b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800428e:	f001 fedd 	bl	800604c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004292:	f000 fd83 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004296:	f001 fea7 	bl	8005fe8 <vPortEnterCritical>
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d103      	bne.n	80042b0 <xQueueGenericSend+0x174>
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b6:	b25b      	sxtb	r3, r3
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d103      	bne.n	80042c6 <xQueueGenericSend+0x18a>
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c6:	f001 fec1 	bl	800604c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ca:	1d3a      	adds	r2, r7, #4
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f802 	bl	80052dc <xTaskCheckForTimeOut>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d124      	bne.n	8004328 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e0:	f000 faa4 	bl	800482c <prvIsQueueFull>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d018      	beq.n	800431c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	3310      	adds	r3, #16
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 ff26 	bl	8005144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fa2f 	bl	800475c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042fe:	f000 fd5b 	bl	8004db8 <xTaskResumeAll>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af7c 	bne.w	8004202 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <xQueueGenericSend+0x200>)
 800430c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	e772      	b.n	8004202 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800431c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431e:	f000 fa1d 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004322:	f000 fd49 	bl	8004db8 <xTaskResumeAll>
 8004326:	e76c      	b.n	8004202 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800432a:	f000 fa17 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800432e:	f000 fd43 	bl	8004db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004334:	4618      	mov	r0, r3
 8004336:	3738      	adds	r7, #56	; 0x38
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <xQueueGenericSendFromISR+0x30>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	b672      	cpsid	i
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	b662      	cpsie	i
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	e7fe      	b.n	800436e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <xQueueGenericSendFromISR+0x3e>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <xQueueGenericSendFromISR+0x42>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <xQueueGenericSendFromISR+0x44>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <xQueueGenericSendFromISR+0x60>
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	b672      	cpsid	i
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	b662      	cpsie	i
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	e7fe      	b.n	800439e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <xQueueGenericSendFromISR+0x6e>
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <xQueueGenericSendFromISR+0x72>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericSendFromISR+0x74>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <xQueueGenericSendFromISR+0x90>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	b672      	cpsid	i
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	b662      	cpsie	i
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	e7fe      	b.n	80043ce <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d0:	f001 feea 	bl	80061a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043d4:	f3ef 8211 	mrs	r2, BASEPRI
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	b672      	cpsid	i
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	b662      	cpsie	i
 80043ec:	61ba      	str	r2, [r7, #24]
 80043ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <xQueueGenericSendFromISR+0xc6>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d12c      	bne.n	8004460 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004416:	f000 f911 	bl	800463c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800441a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d112      	bne.n	800444a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fed9 	bl	80051e8 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e007      	b.n	800445a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800444a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800444e:	3301      	adds	r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	b25a      	sxtb	r2, r3
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800445a:	2301      	movs	r3, #1
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800445e:	e001      	b.n	8004464 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004460:	2300      	movs	r3, #0
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004470:	4618      	mov	r0, r3
 8004472:	3738      	adds	r7, #56	; 0x38
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08c      	sub	sp, #48	; 0x30
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xQueueReceive+0x32>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	b672      	cpsid	i
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	b662      	cpsie	i
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	e7fe      	b.n	80044a8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <xQueueReceive+0x40>
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <xQueueReceive+0x44>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <xQueueReceive+0x46>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xQueueReceive+0x62>
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	b672      	cpsid	i
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	b662      	cpsie	i
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e7fe      	b.n	80044d8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044da:	f001 f843 	bl	8005564 <xTaskGetSchedulerState>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xQueueReceive+0x72>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueReceive+0x76>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueReceive+0x78>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <xQueueReceive+0x94>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	b672      	cpsid	i
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	b662      	cpsie	i
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e7fe      	b.n	800450a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800450c:	f001 fd6c 	bl	8005fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01f      	beq.n	800455c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004520:	f000 f8f6 	bl	8004710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00f      	beq.n	8004554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fe55 	bl	80051e8 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <xQueueReceive+0x1c0>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004554:	f001 fd7a 	bl	800604c <vPortExitCritical>
				return pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	e069      	b.n	8004630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004562:	f001 fd73 	bl	800604c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004566:	2300      	movs	r3, #0
 8004568:	e062      	b.n	8004630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004570:	f107 0310 	add.w	r3, r7, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fe9b 	bl	80052b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800457e:	f001 fd65 	bl	800604c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004582:	f000 fc0b 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004586:	f001 fd2f 	bl	8005fe8 <vPortEnterCritical>
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d103      	bne.n	80045a0 <xQueueReceive+0x128>
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d103      	bne.n	80045b6 <xQueueReceive+0x13e>
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b6:	f001 fd49 	bl	800604c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ba:	1d3a      	adds	r2, r7, #4
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fe8a 	bl	80052dc <xTaskCheckForTimeOut>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d123      	bne.n	8004616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f000 f916 	bl	8004800 <prvIsQueueEmpty>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	3324      	adds	r3, #36	; 0x24
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fdae 	bl	8005144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ea:	f000 f8b7 	bl	800475c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ee:	f000 fbe3 	bl	8004db8 <xTaskResumeAll>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d189      	bne.n	800450c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <xQueueReceive+0x1c0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	e780      	b.n	800450c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800460a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460c:	f000 f8a6 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004610:	f000 fbd2 	bl	8004db8 <xTaskResumeAll>
 8004614:	e77a      	b.n	800450c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004618:	f000 f8a0 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800461c:	f000 fbcc 	bl	8004db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004622:	f000 f8ed 	bl	8004800 <prvIsQueueEmpty>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	f43f af6f 	beq.w	800450c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800462e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14d      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 ff9a 	bl	80055a0 <xTaskPriorityDisinherit>
 800466c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	e043      	b.n	80046fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d119      	bne.n	80046b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6858      	ldr	r0, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	461a      	mov	r2, r3
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	f001 ffd4 	bl	8006634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d32b      	bcc.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e026      	b.n	80046fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68d8      	ldr	r0, [r3, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	461a      	mov	r2, r3
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	f001 ffba 	bl	8006634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	425b      	negs	r3, r3
 80046ca:	441a      	add	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d207      	bcs.n	80046ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	425b      	negs	r3, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d105      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	d303      	bcc.n	8004744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68d9      	ldr	r1, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	461a      	mov	r2, r3
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f001 ff70 	bl	8006634 <memcpy>
	}
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004764:	f001 fc40 	bl	8005fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004770:	e011      	b.n	8004796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fd32 	bl	80051e8 <xTaskRemoveFromEventList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800478a:	f000 fe0b 	bl	80053a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3b01      	subs	r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dce9      	bgt.n	8004772 <prvUnlockQueue+0x16>
 800479e:	e000      	b.n	80047a2 <prvUnlockQueue+0x46>
					break;
 80047a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047aa:	f001 fc4f 	bl	800604c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ae:	f001 fc1b 	bl	8005fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ba:	e011      	b.n	80047e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3310      	adds	r3, #16
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fd0d 	bl	80051e8 <xTaskRemoveFromEventList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047d4:	f000 fde6 	bl	80053a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d8:	7bbb      	ldrb	r3, [r7, #14]
 80047da:	3b01      	subs	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dce9      	bgt.n	80047bc <prvUnlockQueue+0x60>
 80047e8:	e000      	b.n	80047ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047f4:	f001 fc2a 	bl	800604c <vPortExitCritical>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004808:	f001 fbee 	bl	8005fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481e:	f001 fc15 	bl	800604c <vPortExitCritical>

	return xReturn;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004834:	f001 fbd8 	bl	8005fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	429a      	cmp	r2, r3
 8004842:	d102      	bne.n	800484a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e001      	b.n	800484e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484e:	f001 fbfd 	bl	800604c <vPortExitCritical>

	return xReturn;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e014      	b.n	8004896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <vQueueAddToRegistry+0x4c>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004878:	490b      	ldr	r1, [pc, #44]	; (80048a8 <vQueueAddToRegistry+0x4c>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <vQueueAddToRegistry+0x4c>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800488e:	e005      	b.n	800489c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b07      	cmp	r3, #7
 800489a:	d9e7      	bls.n	800486c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	20004e10 	.word	0x20004e10

080048ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048bc:	f001 fb94 	bl	8005fe8 <vPortEnterCritical>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c6:	b25b      	sxtb	r3, r3
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d103      	bne.n	80048d6 <vQueueWaitForMessageRestricted+0x2a>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d103      	bne.n	80048ec <vQueueWaitForMessageRestricted+0x40>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ec:	f001 fbae 	bl	800604c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fc45 	bl	8005190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004906:	6978      	ldr	r0, [r7, #20]
 8004908:	f7ff ff28 	bl	800475c <prvUnlockQueue>
	}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	; 0x38
 8004918:	af04      	add	r7, sp, #16
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xTaskCreateStatic+0x2c>
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	b672      	cpsid	i
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	b662      	cpsie	i
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	e7fe      	b.n	800493e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <xTaskCreateStatic+0x4a>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	b672      	cpsid	i
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	b662      	cpsie	i
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e7fe      	b.n	800495c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800495e:	235c      	movs	r3, #92	; 0x5c
 8004960:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b5c      	cmp	r3, #92	; 0x5c
 8004966:	d00b      	beq.n	8004980 <xTaskCreateStatic+0x6c>
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	b672      	cpsid	i
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	b662      	cpsie	i
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e7fe      	b.n	800497e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004980:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01e      	beq.n	80049c6 <xTaskCreateStatic+0xb2>
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004996:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049a0:	2300      	movs	r3, #0
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f850 	bl	8004a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049c0:	f000 f8de 	bl	8004b80 <prvAddNewTaskToReadyList>
 80049c4:	e001      	b.n	80049ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ca:	697b      	ldr	r3, [r7, #20]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af04      	add	r7, sp, #16
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fc1f 	bl	800622c <pvPortMalloc>
 80049ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00e      	beq.n	8004a14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049f6:	205c      	movs	r0, #92	; 0x5c
 80049f8:	f001 fc18 	bl	800622c <pvPortMalloc>
 80049fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0a:	e005      	b.n	8004a18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a0c:	6978      	ldr	r0, [r7, #20]
 8004a0e:	f001 fcd5 	bl	80063bc <vPortFree>
 8004a12:	e001      	b.n	8004a18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	9302      	str	r3, [sp, #8]
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f80e 	bl	8004a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a42:	69f8      	ldr	r0, [r7, #28]
 8004a44:	f000 f89c 	bl	8004b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e002      	b.n	8004a54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a54:	69bb      	ldr	r3, [r7, #24]
	}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	461a      	mov	r2, r3
 8004a76:	21a5      	movs	r1, #165	; 0xa5
 8004a78:	f001 fde7 	bl	800664a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004a86:	440b      	add	r3, r1
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <prvInitialiseNewTask+0x5a>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	b672      	cpsid	i
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	b662      	cpsie	i
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e7fe      	b.n	8004ab6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01f      	beq.n	8004afe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e012      	b.n	8004aea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	7819      	ldrb	r1, [r3, #0]
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3334      	adds	r3, #52	; 0x34
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d006      	beq.n	8004af2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d9e9      	bls.n	8004ac4 <prvInitialiseNewTask+0x66>
 8004af0:	e000      	b.n	8004af4 <prvInitialiseNewTask+0x96>
			{
				break;
 8004af2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afc:	e003      	b.n	8004b06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	2b37      	cmp	r3, #55	; 0x37
 8004b0a:	d901      	bls.n	8004b10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b0c:	2337      	movs	r3, #55	; 0x37
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f96a 	bl	8003e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	3318      	adds	r3, #24
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff f965 	bl	8003e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f001 f936 	bl	8005dd0 <pxPortInitialiseStack>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 fa2e 	bl	8005fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bac:	f000 fc1e 	bl	80053ec <prvInitialiseTaskLists>
 8004bb0:	e00d      	b.n	8004bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <prvAddNewTaskToReadyList+0x74>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvAddNewTaskToReadyList+0xd8>)
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff f905 	bl	8003e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 fa1c 	bl	800604c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d207      	bcs.n	8004c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvAddNewTaskToReadyList+0xdc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000bbc 	.word	0x20000bbc
 8004c48:	200006e8 	.word	0x200006e8
 8004c4c:	20000bc8 	.word	0x20000bc8
 8004c50:	20000bd8 	.word	0x20000bd8
 8004c54:	20000bc4 	.word	0x20000bc4
 8004c58:	200006ec 	.word	0x200006ec
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <vTaskDelay+0x64>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <vTaskDelay+0x32>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	b672      	cpsid	i
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	b662      	cpsie	i
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	e7fe      	b.n	8004c90 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004c92:	f000 f883 	bl	8004d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c96:	2100      	movs	r1, #0
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fcf1 	bl	8005680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9e:	f000 f88b 	bl	8004db8 <xTaskResumeAll>
 8004ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <vTaskDelay+0x68>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000be4 	.word	0x20000be4
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cda:	463a      	mov	r2, r7
 8004cdc:	1d39      	adds	r1, r7, #4
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f838 	bl	8003d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	9202      	str	r2, [sp, #8]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	4922      	ldr	r1, [pc, #136]	; (8004d84 <vTaskStartScheduler+0xb8>)
 8004cfc:	4822      	ldr	r0, [pc, #136]	; (8004d88 <vTaskStartScheduler+0xbc>)
 8004cfe:	f7ff fe09 	bl	8004914 <xTaskCreateStatic>
 8004d02:	4602      	mov	r2, r0
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <vTaskStartScheduler+0xc0>)
 8004d06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d08:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <vTaskStartScheduler+0xc0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e001      	b.n	8004d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d20:	f000 fd02 	bl	8005728 <xTimerCreateTimerTask>
 8004d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d117      	bne.n	8004d5c <vTaskStartScheduler+0x90>
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	b672      	cpsid	i
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	b662      	cpsie	i
 8004d40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <vTaskStartScheduler+0xc4>)
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <vTaskStartScheduler+0xc8>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <vTaskStartScheduler+0xcc>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d56:	f001 f8cb 	bl	8005ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d5a:	e00f      	b.n	8004d7c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d10b      	bne.n	8004d7c <vTaskStartScheduler+0xb0>
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	b672      	cpsid	i
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	b662      	cpsie	i
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e7fe      	b.n	8004d7a <vTaskStartScheduler+0xae>
}
 8004d7c:	bf00      	nop
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	08006690 	.word	0x08006690
 8004d88:	080053bd 	.word	0x080053bd
 8004d8c:	20000be0 	.word	0x20000be0
 8004d90:	20000bdc 	.word	0x20000bdc
 8004d94:	20000bc8 	.word	0x20000bc8
 8004d98:	20000bc0 	.word	0x20000bc0

08004d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <vTaskSuspendAll+0x18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <vTaskSuspendAll+0x18>)
 8004da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000be4 	.word	0x20000be4

08004db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xTaskResumeAll+0x2e>
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	b672      	cpsid	i
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	b662      	cpsie	i
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	e7fe      	b.n	8004de4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de6:	f001 f8ff 	bl	8005fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df4:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d162      	bne.n	8004ec2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <xTaskResumeAll+0x11c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05e      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e04:	e02f      	b.n	8004e66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e06:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <xTaskResumeAll+0x120>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3318      	adds	r3, #24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f85e 	bl	8003ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f859 	bl	8003ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <xTaskResumeAll+0x124>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d903      	bls.n	8004e36 <xTaskResumeAll+0x7e>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <xTaskResumeAll+0x124>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <xTaskResumeAll+0x128>)
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7fe ffe4 	bl	8003e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <xTaskResumeAll+0x12c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskResumeAll+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e74:	f000 fb56 	bl	8005524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <xTaskResumeAll+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e84:	f000 f846 	bl	8004f14 <xTaskIncrementTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xTaskResumeAll+0x134>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <xTaskResumeAll+0x138>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 f8c3 	bl	800604c <vPortExitCritical>

	return xAlreadyYielded;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000be4 	.word	0x20000be4
 8004ed4:	20000bbc 	.word	0x20000bbc
 8004ed8:	20000b7c 	.word	0x20000b7c
 8004edc:	20000bc4 	.word	0x20000bc4
 8004ee0:	200006ec 	.word	0x200006ec
 8004ee4:	200006e8 	.word	0x200006e8
 8004ee8:	20000bd0 	.word	0x20000bd0
 8004eec:	20000bcc 	.word	0x20000bcc
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <xTaskGetTickCount+0x1c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000bc0 	.word	0x20000bc0

08004f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	; (800505c <xTaskIncrementTick+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 808a 	bne.w	800503c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f30:	4a4b      	ldr	r2, [pc, #300]	; (8005060 <xTaskIncrementTick+0x14c>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <xTaskIncrementTick+0x150>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <xTaskIncrementTick+0x4a>
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	b672      	cpsid	i
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	b662      	cpsie	i
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	e7fe      	b.n	8004f5c <xTaskIncrementTick+0x48>
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b40      	ldr	r3, [pc, #256]	; (8005068 <xTaskIncrementTick+0x154>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3e      	ldr	r2, [pc, #248]	; (8005064 <xTaskIncrementTick+0x150>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	; (8005068 <xTaskIncrementTick+0x154>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b3e      	ldr	r3, [pc, #248]	; (800506c <xTaskIncrementTick+0x158>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a3c      	ldr	r2, [pc, #240]	; (800506c <xTaskIncrementTick+0x158>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f000 fad2 	bl	8005524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f80:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <xTaskIncrementTick+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d349      	bcc.n	800501e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b36      	ldr	r3, [pc, #216]	; (8005064 <xTaskIncrementTick+0x150>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f94:	4b36      	ldr	r3, [pc, #216]	; (8005070 <xTaskIncrementTick+0x15c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	601a      	str	r2, [r3, #0]
					break;
 8004f9c:	e03f      	b.n	800501e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <xTaskIncrementTick+0x150>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d203      	bcs.n	8004fbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	; (8005070 <xTaskIncrementTick+0x15c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fbc:	e02f      	b.n	800501e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe ff86 	bl	8003ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe ff7d 	bl	8003ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <xTaskIncrementTick+0x160>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d903      	bls.n	8004fee <xTaskIncrementTick+0xda>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	4a22      	ldr	r2, [pc, #136]	; (8005074 <xTaskIncrementTick+0x160>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <xTaskIncrementTick+0x164>)
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe ff08 	bl	8003e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4b1b      	ldr	r3, [pc, #108]	; (800507c <xTaskIncrementTick+0x168>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d3b8      	bcc.n	8004f8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501c:	e7b5      	b.n	8004f8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <xTaskIncrementTick+0x168>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	4914      	ldr	r1, [pc, #80]	; (8005078 <xTaskIncrementTick+0x164>)
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d907      	bls.n	8005046 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e004      	b.n	8005046 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xTaskIncrementTick+0x16c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <xTaskIncrementTick+0x16c>)
 8005044:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <xTaskIncrementTick+0x170>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005052:	697b      	ldr	r3, [r7, #20]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000be4 	.word	0x20000be4
 8005060:	20000bc0 	.word	0x20000bc0
 8005064:	20000b74 	.word	0x20000b74
 8005068:	20000b78 	.word	0x20000b78
 800506c:	20000bd4 	.word	0x20000bd4
 8005070:	20000bdc 	.word	0x20000bdc
 8005074:	20000bc4 	.word	0x20000bc4
 8005078:	200006ec 	.word	0x200006ec
 800507c:	200006e8 	.word	0x200006e8
 8005080:	20000bcc 	.word	0x20000bcc
 8005084:	20000bd0 	.word	0x20000bd0

08005088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <vTaskSwitchContext+0xa8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <vTaskSwitchContext+0xac>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800509c:	e042      	b.n	8005124 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <vTaskSwitchContext+0xac>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b24      	ldr	r3, [pc, #144]	; (8005138 <vTaskSwitchContext+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e011      	b.n	80050d0 <vTaskSwitchContext+0x48>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <vTaskSwitchContext+0x42>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	b672      	cpsid	i
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	b662      	cpsie	i
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	e7fe      	b.n	80050c8 <vTaskSwitchContext+0x40>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	491a      	ldr	r1, [pc, #104]	; (800513c <vTaskSwitchContext+0xb4>)
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e3      	beq.n	80050ac <vTaskSwitchContext+0x24>
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <vTaskSwitchContext+0xb4>)
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3308      	adds	r3, #8
 8005106:	429a      	cmp	r2, r3
 8005108:	d104      	bne.n	8005114 <vTaskSwitchContext+0x8c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <vTaskSwitchContext+0xb8>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <vTaskSwitchContext+0xb0>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000be4 	.word	0x20000be4
 8005134:	20000bd0 	.word	0x20000bd0
 8005138:	20000bc4 	.word	0x20000bc4
 800513c:	200006ec 	.word	0x200006ec
 8005140:	200006e8 	.word	0x200006e8

08005144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <vTaskPlaceOnEventList+0x28>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	b672      	cpsid	i
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	b662      	cpsie	i
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e7fe      	b.n	800516a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <vTaskPlaceOnEventList+0x48>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3318      	adds	r3, #24
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe fe74 	bl	8003e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800517a:	2101      	movs	r1, #1
 800517c:	6838      	ldr	r0, [r7, #0]
 800517e:	f000 fa7f 	bl	8005680 <prvAddCurrentTaskToDelayedList>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200006e8 	.word	0x200006e8

08005190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <vTaskPlaceOnEventListRestricted+0x2a>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	b672      	cpsid	i
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	b662      	cpsie	i
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e7fe      	b.n	80051b8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3318      	adds	r3, #24
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7fe fe29 	bl	8003e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	68b8      	ldr	r0, [r7, #8]
 80051d8:	f000 fa52 	bl	8005680 <prvAddCurrentTaskToDelayedList>
	}
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200006e8 	.word	0x200006e8

080051e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <xTaskRemoveFromEventList+0x2e>
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	b672      	cpsid	i
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	b662      	cpsie	i
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e7fe      	b.n	8005214 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3318      	adds	r3, #24
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fe5a 	bl	8003ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <xTaskRemoveFromEventList+0xb0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11d      	bne.n	8005264 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3304      	adds	r3, #4
 800522c:	4618      	mov	r0, r3
 800522e:	f7fe fe51 	bl	8003ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	4b19      	ldr	r3, [pc, #100]	; (800529c <xTaskRemoveFromEventList+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d903      	bls.n	8005246 <xTaskRemoveFromEventList+0x5e>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <xTaskRemoveFromEventList+0xb4>)
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <xTaskRemoveFromEventList+0xb8>)
 8005254:	441a      	add	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3304      	adds	r3, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f7fe fddc 	bl	8003e1a <vListInsertEnd>
 8005262:	e005      	b.n	8005270 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3318      	adds	r3, #24
 8005268:	4619      	mov	r1, r3
 800526a:	480e      	ldr	r0, [pc, #56]	; (80052a4 <xTaskRemoveFromEventList+0xbc>)
 800526c:	f7fe fdd5 	bl	8003e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <xTaskRemoveFromEventList+0xc0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	429a      	cmp	r2, r3
 800527c:	d905      	bls.n	800528a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <xTaskRemoveFromEventList+0xc4>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e001      	b.n	800528e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800528e:	697b      	ldr	r3, [r7, #20]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000be4 	.word	0x20000be4
 800529c:	20000bc4 	.word	0x20000bc4
 80052a0:	200006ec 	.word	0x200006ec
 80052a4:	20000b7c 	.word	0x20000b7c
 80052a8:	200006e8 	.word	0x200006e8
 80052ac:	20000bd0 	.word	0x20000bd0

080052b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <vTaskInternalSetTimeOutState+0x24>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <vTaskInternalSetTimeOutState+0x28>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	20000bd4 	.word	0x20000bd4
 80052d8:	20000bc0 	.word	0x20000bc0

080052dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <xTaskCheckForTimeOut+0x28>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	b672      	cpsid	i
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	b662      	cpsie	i
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	e7fe      	b.n	8005302 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <xTaskCheckForTimeOut+0x46>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	b672      	cpsid	i
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	b662      	cpsie	i
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e7fe      	b.n	8005320 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005322:	f000 fe61 	bl	8005fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <xTaskCheckForTimeOut+0xc0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d102      	bne.n	8005346 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e023      	b.n	800538e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <xTaskCheckForTimeOut+0xc4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d007      	beq.n	8005362 <xTaskCheckForTimeOut+0x86>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e015      	b.n	800538e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	429a      	cmp	r2, r3
 800536a:	d20b      	bcs.n	8005384 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff99 	bl	80052b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e004      	b.n	800538e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800538e:	f000 fe5d 	bl	800604c <vPortExitCritical>

	return xReturn;
 8005392:	69fb      	ldr	r3, [r7, #28]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000bc0 	.word	0x20000bc0
 80053a0:	20000bd4 	.word	0x20000bd4

080053a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <vTaskMissedYield+0x14>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	bf00      	nop
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20000bd0 	.word	0x20000bd0

080053bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053c4:	f000 f852 	bl	800546c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <prvIdleTask+0x28>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d9f9      	bls.n	80053c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <prvIdleTask+0x2c>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053e0:	e7f0      	b.n	80053c4 <prvIdleTask+0x8>
 80053e2:	bf00      	nop
 80053e4:	200006ec 	.word	0x200006ec
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	e00c      	b.n	8005412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <prvInitialiseTaskLists+0x60>)
 8005404:	4413      	add	r3, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe fcda 	bl	8003dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3301      	adds	r3, #1
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b37      	cmp	r3, #55	; 0x37
 8005416:	d9ef      	bls.n	80053f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005418:	480d      	ldr	r0, [pc, #52]	; (8005450 <prvInitialiseTaskLists+0x64>)
 800541a:	f7fe fcd1 	bl	8003dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800541e:	480d      	ldr	r0, [pc, #52]	; (8005454 <prvInitialiseTaskLists+0x68>)
 8005420:	f7fe fcce 	bl	8003dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005424:	480c      	ldr	r0, [pc, #48]	; (8005458 <prvInitialiseTaskLists+0x6c>)
 8005426:	f7fe fccb 	bl	8003dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800542a:	480c      	ldr	r0, [pc, #48]	; (800545c <prvInitialiseTaskLists+0x70>)
 800542c:	f7fe fcc8 	bl	8003dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005430:	480b      	ldr	r0, [pc, #44]	; (8005460 <prvInitialiseTaskLists+0x74>)
 8005432:	f7fe fcc5 	bl	8003dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <prvInitialiseTaskLists+0x78>)
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <prvInitialiseTaskLists+0x64>)
 800543a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <prvInitialiseTaskLists+0x7c>)
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <prvInitialiseTaskLists+0x68>)
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200006ec 	.word	0x200006ec
 8005450:	20000b4c 	.word	0x20000b4c
 8005454:	20000b60 	.word	0x20000b60
 8005458:	20000b7c 	.word	0x20000b7c
 800545c:	20000b90 	.word	0x20000b90
 8005460:	20000ba8 	.word	0x20000ba8
 8005464:	20000b74 	.word	0x20000b74
 8005468:	20000b78 	.word	0x20000b78

0800546c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005472:	e019      	b.n	80054a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005474:	f000 fdb8 	bl	8005fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <prvCheckTasksWaitingTermination+0x4c>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe fd25 	bl	8003ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <prvCheckTasksWaitingTermination+0x50>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <prvCheckTasksWaitingTermination+0x50>)
 8005492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <prvCheckTasksWaitingTermination+0x54>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3b01      	subs	r3, #1
 800549a:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <prvCheckTasksWaitingTermination+0x54>)
 800549c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800549e:	f000 fdd5 	bl	800604c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f80e 	bl	80054c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <prvCheckTasksWaitingTermination+0x54>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e1      	bne.n	8005474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000b90 	.word	0x20000b90
 80054bc:	20000bbc 	.word	0x20000bbc
 80054c0:	20000ba4 	.word	0x20000ba4

080054c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 ff6e 	bl	80063bc <vPortFree>
				vPortFree( pxTCB );
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 ff6b 	bl	80063bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054e6:	e019      	b.n	800551c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d103      	bne.n	80054fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 ff62 	bl	80063bc <vPortFree>
	}
 80054f8:	e010      	b.n	800551c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005500:	2b02      	cmp	r3, #2
 8005502:	d00b      	beq.n	800551c <prvDeleteTCB+0x58>
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	b672      	cpsid	i
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	b662      	cpsie	i
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e7fe      	b.n	800551a <prvDeleteTCB+0x56>
	}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <prvResetNextTaskUnblockTime+0x38>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <prvResetNextTaskUnblockTime+0x3c>)
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800553c:	e008      	b.n	8005550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <prvResetNextTaskUnblockTime+0x38>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <prvResetNextTaskUnblockTime+0x3c>)
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000b74 	.word	0x20000b74
 8005560:	20000bdc 	.word	0x20000bdc

08005564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <xTaskGetSchedulerState+0x34>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005572:	2301      	movs	r3, #1
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	e008      	b.n	800558a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b08      	ldr	r3, [pc, #32]	; (800559c <xTaskGetSchedulerState+0x38>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005580:	2302      	movs	r3, #2
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	e001      	b.n	800558a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800558a:	687b      	ldr	r3, [r7, #4]
	}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20000bc8 	.word	0x20000bc8
 800559c:	20000be4 	.word	0x20000be4

080055a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d058      	beq.n	8005668 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055b6:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <xTaskPriorityDisinherit+0xd4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d00b      	beq.n	80055d8 <xTaskPriorityDisinherit+0x38>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e7fe      	b.n	80055d6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <xTaskPriorityDisinherit+0x58>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	b672      	cpsid	i
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	b662      	cpsie	i
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	e7fe      	b.n	80055f6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	429a      	cmp	r2, r3
 800560c:	d02c      	beq.n	8005668 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	2b00      	cmp	r3, #0
 8005614:	d128      	bne.n	8005668 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc5a 	bl	8003ed4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <xTaskPriorityDisinherit+0xd8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d903      	bls.n	8005648 <xTaskPriorityDisinherit+0xa8>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <xTaskPriorityDisinherit+0xd8>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4a09      	ldr	r2, [pc, #36]	; (800567c <xTaskPriorityDisinherit+0xdc>)
 8005656:	441a      	add	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fe fbdb 	bl	8003e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005668:	697b      	ldr	r3, [r7, #20]
	}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200006e8 	.word	0x200006e8
 8005678:	20000bc4 	.word	0x20000bc4
 800567c:	200006ec 	.word	0x200006ec

08005680 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <prvAddCurrentTaskToDelayedList+0x90>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <prvAddCurrentTaskToDelayedList+0x94>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fc1c 	bl	8003ed4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d10a      	bne.n	80056ba <prvAddCurrentTaskToDelayedList+0x3a>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056aa:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <prvAddCurrentTaskToDelayedList+0x94>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4819      	ldr	r0, [pc, #100]	; (8005718 <prvAddCurrentTaskToDelayedList+0x98>)
 80056b4:	f7fe fbb1 	bl	8003e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056b8:	e026      	b.n	8005708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4413      	add	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <prvAddCurrentTaskToDelayedList+0x94>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d209      	bcs.n	80056e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <prvAddCurrentTaskToDelayedList+0x9c>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe fbbf 	bl	8003e62 <vListInsert>
}
 80056e4:	e010      	b.n	8005708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <prvAddCurrentTaskToDelayedList+0x94>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f7fe fbb5 	bl	8003e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d202      	bcs.n	8005708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000bc0 	.word	0x20000bc0
 8005714:	200006e8 	.word	0x200006e8
 8005718:	20000ba8 	.word	0x20000ba8
 800571c:	20000b78 	.word	0x20000b78
 8005720:	20000b74 	.word	0x20000b74
 8005724:	20000bdc 	.word	0x20000bdc

08005728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005732:	f000 fb0d 	bl	8005d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <xTimerCreateTimerTask+0x84>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d021      	beq.n	8005782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005746:	1d3a      	adds	r2, r7, #4
 8005748:	f107 0108 	add.w	r1, r7, #8
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fb1b 	bl	8003d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	9202      	str	r2, [sp, #8]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	2302      	movs	r3, #2
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	460a      	mov	r2, r1
 8005768:	4911      	ldr	r1, [pc, #68]	; (80057b0 <xTimerCreateTimerTask+0x88>)
 800576a:	4812      	ldr	r0, [pc, #72]	; (80057b4 <xTimerCreateTimerTask+0x8c>)
 800576c:	f7ff f8d2 	bl	8004914 <xTaskCreateStatic>
 8005770:	4602      	mov	r2, r0
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <xTimerCreateTimerTask+0x90>)
 8005774:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <xTimerCreateTimerTask+0x90>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <xTimerCreateTimerTask+0x78>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	b672      	cpsid	i
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	b662      	cpsie	i
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e7fe      	b.n	800579e <xTimerCreateTimerTask+0x76>
	return xReturn;
 80057a0:	697b      	ldr	r3, [r7, #20]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000c18 	.word	0x20000c18
 80057b0:	08006698 	.word	0x08006698
 80057b4:	080058f5 	.word	0x080058f5
 80057b8:	20000c1c 	.word	0x20000c1c

080057bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <xTimerGenericCommand+0x30>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	e7fe      	b.n	80057ea <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <xTimerGenericCommand+0x98>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02a      	beq.n	800584a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b05      	cmp	r3, #5
 8005804:	dc18      	bgt.n	8005838 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005806:	f7ff fead 	bl	8005564 <xTaskGetSchedulerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b02      	cmp	r3, #2
 800580e:	d109      	bne.n	8005824 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <xTimerGenericCommand+0x98>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	f107 0110 	add.w	r1, r7, #16
 8005818:	2300      	movs	r3, #0
 800581a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581c:	f7fe fc8e 	bl	800413c <xQueueGenericSend>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24
 8005822:	e012      	b.n	800584a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <xTimerGenericCommand+0x98>)
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	f107 0110 	add.w	r1, r7, #16
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	f7fe fc84 	bl	800413c <xQueueGenericSend>
 8005834:	6278      	str	r0, [r7, #36]	; 0x24
 8005836:	e008      	b.n	800584a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <xTimerGenericCommand+0x98>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	f107 0110 	add.w	r1, r7, #16
 8005840:	2300      	movs	r3, #0
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	f7fe fd7c 	bl	8004340 <xQueueGenericSendFromISR>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800584c:	4618      	mov	r0, r3
 800584e:	3728      	adds	r7, #40	; 0x28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000c18 	.word	0x20000c18

08005858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005862:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <prvProcessExpiredTimer+0x98>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	3304      	adds	r3, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe fb2f 	bl	8003ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d023      	beq.n	80058cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	18d1      	adds	r1, r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f000 f8d3 	bl	8005a3c <prvInsertTimerInActiveList>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800589c:	2300      	movs	r3, #0
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2300      	movs	r3, #0
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	6978      	ldr	r0, [r7, #20]
 80058a8:	f7ff ff88 	bl	80057bc <xTimerGenericCommand>
 80058ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d114      	bne.n	80058de <prvProcessExpiredTimer+0x86>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	b672      	cpsid	i
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	b662      	cpsie	i
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e7fe      	b.n	80058ca <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	4798      	blx	r3
}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000c10 	.word	0x20000c10

080058f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058fc:	f107 0308 	add.w	r3, r7, #8
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f857 	bl	80059b4 <prvGetNextExpireTime>
 8005906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4619      	mov	r1, r3
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f803 	bl	8005918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005912:	f000 f8d5 	bl	8005ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005916:	e7f1      	b.n	80058fc <prvTimerTask+0x8>

08005918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005922:	f7ff fa3b 	bl	8004d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f866 	bl	80059fc <prvSampleTimeNow>
 8005930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d130      	bne.n	800599a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <prvProcessTimerOrBlockTask+0x3c>
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d806      	bhi.n	8005954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005946:	f7ff fa37 	bl	8004db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff83 	bl	8005858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005952:	e024      	b.n	800599e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <prvProcessTimerOrBlockTask+0x90>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <prvProcessTimerOrBlockTask+0x50>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <prvProcessTimerOrBlockTask+0x52>
 8005968:	2300      	movs	r3, #0
 800596a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800596c:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <prvProcessTimerOrBlockTask+0x94>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	f7fe ff97 	bl	80048ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800597e:	f7ff fa1b 	bl	8004db8 <xTaskResumeAll>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <prvProcessTimerOrBlockTask+0x98>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
}
 8005998:	e001      	b.n	800599e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800599a:	f7ff fa0d 	bl	8004db8 <xTaskResumeAll>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000c14 	.word	0x20000c14
 80059ac:	20000c18 	.word	0x20000c18
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <prvGetNextExpireTime+0x44>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <prvGetNextExpireTime+0x16>
 80059c6:	2201      	movs	r2, #1
 80059c8:	e000      	b.n	80059cc <prvGetNextExpireTime+0x18>
 80059ca:	2200      	movs	r2, #0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvGetNextExpireTime+0x44>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e001      	b.n	80059e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000c10 	.word	0x20000c10

080059fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a04:	f7ff fa76 	bl	8004ef4 <xTaskGetTickCount>
 8005a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <prvSampleTimeNow+0x3c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d205      	bcs.n	8005a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a14:	f000 f936 	bl	8005c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a26:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <prvSampleTimeNow+0x3c>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000c20 	.word	0x20000c20

08005a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d812      	bhi.n	8005a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d302      	bcc.n	8005a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e01b      	b.n	8005aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <prvInsertTimerInActiveList+0x7c>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fe f9ee 	bl	8003e62 <vListInsert>
 8005a86:	e012      	b.n	8005aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d206      	bcs.n	8005a9e <prvInsertTimerInActiveList+0x62>
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e007      	b.n	8005aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <prvInsertTimerInActiveList+0x80>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe f9da 	bl	8003e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000c14 	.word	0x20000c14
 8005abc:	20000c10 	.word	0x20000c10

08005ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08e      	sub	sp, #56	; 0x38
 8005ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ac6:	e0cc      	b.n	8005c62 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da19      	bge.n	8005b02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <prvProcessReceivedCommands+0x32>
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	b672      	cpsid	i
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	b662      	cpsie	i
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e7fe      	b.n	8005af0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	6850      	ldr	r0, [r2, #4]
 8005afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	4611      	mov	r1, r2
 8005b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f2c0 80ab 	blt.w	8005c60 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe f9da 	bl	8003ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b20:	463b      	mov	r3, r7
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff ff6a 	bl	80059fc <prvSampleTimeNow>
 8005b28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	f200 8098 	bhi.w	8005c62 <prvProcessReceivedCommands+0x1a2>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <prvProcessReceivedCommands+0x78>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b61 	.word	0x08005b61
 8005b44:	08005bd7 	.word	0x08005bd7
 8005b48:	08005beb 	.word	0x08005beb
 8005b4c:	08005c37 	.word	0x08005c37
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b61 	.word	0x08005b61
 8005b58:	08005bd7 	.word	0x08005bd7
 8005b5c:	08005beb 	.word	0x08005beb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	18d1      	adds	r1, r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b80:	f7ff ff5c 	bl	8005a3c <prvInsertTimerInActiveList>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d06b      	beq.n	8005c62 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d060      	beq.n	8005c62 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	441a      	add	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb2:	f7ff fe03 	bl	80057bc <xTimerGenericCommand>
 8005bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d151      	bne.n	8005c62 <prvProcessReceivedCommands+0x1a2>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	b672      	cpsid	i
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	b662      	cpsie	i
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e7fe      	b.n	8005bd4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005be8:	e03b      	b.n	8005c62 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <prvProcessReceivedCommands+0x162>
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	b672      	cpsid	i
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	b662      	cpsie	i
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e7fe      	b.n	8005c20 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	18d1      	adds	r1, r2, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c30:	f7ff ff04 	bl	8005a3c <prvInsertTimerInActiveList>
					break;
 8005c34:	e015      	b.n	8005c62 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c46:	f000 fbb9 	bl	80063bc <vPortFree>
 8005c4a:	e00a      	b.n	8005c62 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c5e:	e000      	b.n	8005c62 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <prvProcessReceivedCommands+0x1c0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1d39      	adds	r1, r7, #4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fc04 	bl	8004478 <xQueueReceive>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f47f af28 	bne.w	8005ac8 <prvProcessReceivedCommands+0x8>
	}
}
 8005c78:	bf00      	nop
 8005c7a:	3730      	adds	r7, #48	; 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000c18 	.word	0x20000c18

08005c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c8a:	e049      	b.n	8005d20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c8c:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c96:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe f915 	bl	8003ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d02f      	beq.n	8005d20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d90e      	bls.n	8005cf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cde:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7fe f8ba 	bl	8003e62 <vListInsert>
 8005cee:	e017      	b.n	8005d20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fd5e 	bl	80057bc <xTimerGenericCommand>
 8005d00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <prvSwitchTimerLists+0x9c>
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	b672      	cpsid	i
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	b662      	cpsie	i
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	e7fe      	b.n	8005d1e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1b0      	bne.n	8005c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <prvSwitchTimerLists+0xc8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <prvSwitchTimerLists+0xc4>)
 8005d36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d38:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <prvSwitchTimerLists+0xc8>)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6013      	str	r3, [r2, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000c10 	.word	0x20000c10
 8005d4c:	20000c14 	.word	0x20000c14

08005d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d56:	f000 f947 	bl	8005fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d120      	bne.n	8005da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d62:	4814      	ldr	r0, [pc, #80]	; (8005db4 <prvCheckForValidListAndQueue+0x64>)
 8005d64:	f7fe f82c 	bl	8003dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d68:	4813      	ldr	r0, [pc, #76]	; (8005db8 <prvCheckForValidListAndQueue+0x68>)
 8005d6a:	f7fe f829 	bl	8003dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <prvCheckForValidListAndQueue+0x6c>)
 8005d70:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <prvCheckForValidListAndQueue+0x64>)
 8005d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <prvCheckForValidListAndQueue+0x70>)
 8005d76:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <prvCheckForValidListAndQueue+0x68>)
 8005d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <prvCheckForValidListAndQueue+0x74>)
 8005d80:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <prvCheckForValidListAndQueue+0x78>)
 8005d82:	2110      	movs	r1, #16
 8005d84:	200a      	movs	r0, #10
 8005d86:	f7fe f939 	bl	8003ffc <xQueueGenericCreateStatic>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	490b      	ldr	r1, [pc, #44]	; (8005dcc <prvCheckForValidListAndQueue+0x7c>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fd5c 	bl	800485c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005da4:	f000 f952 	bl	800604c <vPortExitCritical>
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000c18 	.word	0x20000c18
 8005db4:	20000be8 	.word	0x20000be8
 8005db8:	20000bfc 	.word	0x20000bfc
 8005dbc:	20000c10 	.word	0x20000c10
 8005dc0:	20000c14 	.word	0x20000c14
 8005dc4:	20000cc4 	.word	0x20000cc4
 8005dc8:	20000c24 	.word	0x20000c24
 8005dcc:	080066a0 	.word	0x080066a0

08005dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b04      	subs	r3, #4
 8005de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e00:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <pxPortInitialiseStack+0x64>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3b14      	subs	r3, #20
 8005e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f06f 0202 	mvn.w	r2, #2
 8005e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b20      	subs	r3, #32
 8005e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	08005e39 	.word	0x08005e39

08005e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <prvTaskExitError+0x58>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d00b      	beq.n	8005e64 <prvTaskExitError+0x2c>
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	b672      	cpsid	i
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	b662      	cpsie	i
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e7fe      	b.n	8005e62 <prvTaskExitError+0x2a>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e7a:	bf00      	nop
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0fc      	beq.n	8005e7c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	2000000c 	.word	0x2000000c
	...

08005ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <pxCurrentTCBConst2>)
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	f380 8809 	msr	PSP, r0
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8811 	msr	BASEPRI, r0
 8005eba:	4770      	bx	lr
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst2>:
 8005ec0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ec8:	4808      	ldr	r0, [pc, #32]	; (8005eec <prvPortStartFirstTask+0x24>)
 8005eca:	6800      	ldr	r0, [r0, #0]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f380 8808 	msr	MSP, r0
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f380 8814 	msr	CONTROL, r0
 8005eda:	b662      	cpsie	i
 8005edc:	b661      	cpsie	f
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	df00      	svc	0
 8005ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eea:	bf00      	nop
 8005eec:	e000ed08 	.word	0xe000ed08

08005ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ef6:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <xPortStartScheduler+0xe0>)
 8005ef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <xPortStartScheduler+0xe4>)
 8005f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f20:	2207      	movs	r2, #7
 8005f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f24:	e009      	b.n	8005f3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	d0ef      	beq.n	8005f26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1c3 0307 	rsb	r3, r3, #7
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d00b      	beq.n	8005f6a <xPortStartScheduler+0x7a>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	b672      	cpsid	i
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	b662      	cpsie	i
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	e7fe      	b.n	8005f68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f7c:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <xPortStartScheduler+0xe8>)
 8005f7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <xPortStartScheduler+0xec>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <xPortStartScheduler+0xec>)
 8005f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <xPortStartScheduler+0xec>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <xPortStartScheduler+0xec>)
 8005f9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fa0:	f000 f8d4 	bl	800614c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <xPortStartScheduler+0xf0>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005faa:	f000 f8f3 	bl	8006194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <xPortStartScheduler+0xf4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <xPortStartScheduler+0xf4>)
 8005fb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fba:	f7ff ff85 	bl	8005ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fbe:	f7ff f863 	bl	8005088 <vTaskSwitchContext>
	prvTaskExitError();
 8005fc2:	f7ff ff39 	bl	8005e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	e000e400 	.word	0xe000e400
 8005fd4:	20000d14 	.word	0x20000d14
 8005fd8:	20000d18 	.word	0x20000d18
 8005fdc:	e000ed20 	.word	0xe000ed20
 8005fe0:	2000000c 	.word	0x2000000c
 8005fe4:	e000ef34 	.word	0xe000ef34

08005fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	b672      	cpsid	i
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	b662      	cpsie	i
 8006002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <vPortEnterCritical+0x5c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <vPortEnterCritical+0x5c>)
 800600c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <vPortEnterCritical+0x5c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d110      	bne.n	8006038 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <vPortEnterCritical+0x60>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <vPortEnterCritical+0x50>
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	b672      	cpsid	i
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	b662      	cpsie	i
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	e7fe      	b.n	8006036 <vPortEnterCritical+0x4e>
	}
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	2000000c 	.word	0x2000000c
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <vPortExitCritical+0x26>
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	b672      	cpsid	i
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	b662      	cpsie	i
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	e7fe      	b.n	8006070 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vPortExitCritical+0x50>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3b01      	subs	r3, #1
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <vPortExitCritical+0x50>)
 800607a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800607c:	4b07      	ldr	r3, [pc, #28]	; (800609c <vPortExitCritical+0x50>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <vPortExitCritical+0x42>
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060a0:	f3ef 8009 	mrs	r0, PSP
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <pxCurrentTCBConst>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f01e 0f10 	tst.w	lr, #16
 80060b0:	bf08      	it	eq
 80060b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	6010      	str	r0, [r2, #0]
 80060bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	f7fe ffd8 	bl	8005088 <vTaskSwitchContext>
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f380 8811 	msr	BASEPRI, r0
 80060e0:	bc09      	pop	{r0, r3}
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f01e 0f10 	tst.w	lr, #16
 80060ee:	bf08      	it	eq
 80060f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060f4:	f380 8809 	msr	PSP, r0
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <pxCurrentTCBConst>:
 8006100:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	b672      	cpsid	i
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	b662      	cpsie	i
 8006122:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006124:	f7fe fef6 	bl	8004f14 <xTaskIncrementTick>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <SysTick_Handler+0x40>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	603b      	str	r3, [r7, #0]
	__asm volatile
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <vPortSetupTimerInterrupt+0x38>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <vPortSetupTimerInterrupt+0x3c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <vPortSetupTimerInterrupt+0x40>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <vPortSetupTimerInterrupt+0x44>)
 800616a:	3b01      	subs	r3, #1
 800616c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	e000e010 	.word	0xe000e010
 8006184:	e000e018 	.word	0xe000e018
 8006188:	20000000 	.word	0x20000000
 800618c:	10624dd3 	.word	0x10624dd3
 8006190:	e000e014 	.word	0xe000e014

08006194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061a4 <vPortEnableVFP+0x10>
 8006198:	6801      	ldr	r1, [r0, #0]
 800619a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800619e:	6001      	str	r1, [r0, #0]
 80061a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061a2:	bf00      	nop
 80061a4:	e000ed88 	.word	0xe000ed88

080061a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061ae:	f3ef 8305 	mrs	r3, IPSR
 80061b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d915      	bls.n	80061e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <vPortValidateInterruptPriority+0x74>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <vPortValidateInterruptPriority+0x78>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	7afa      	ldrb	r2, [r7, #11]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d20b      	bcs.n	80061e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	b672      	cpsid	i
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	b662      	cpsie	i
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e7fe      	b.n	80061e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <vPortValidateInterruptPriority+0x7c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061ee:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <vPortValidateInterruptPriority+0x80>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d90b      	bls.n	800620e <vPortValidateInterruptPriority+0x66>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	b672      	cpsid	i
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	b662      	cpsie	i
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	e7fe      	b.n	800620c <vPortValidateInterruptPriority+0x64>
	}
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000e3f0 	.word	0xe000e3f0
 8006220:	20000d14 	.word	0x20000d14
 8006224:	e000ed0c 	.word	0xe000ed0c
 8006228:	20000d18 	.word	0x20000d18

0800622c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006238:	f7fe fdb0 	bl	8004d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800623c:	4b5a      	ldr	r3, [pc, #360]	; (80063a8 <pvPortMalloc+0x17c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006244:	f000 f916 	bl	8006474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006248:	4b58      	ldr	r3, [pc, #352]	; (80063ac <pvPortMalloc+0x180>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 8090 	bne.w	8006376 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01e      	beq.n	800629a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800625c:	2208      	movs	r2, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f023 0307 	bic.w	r3, r3, #7
 8006274:	3308      	adds	r3, #8
 8006276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <pvPortMalloc+0x6e>
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	b672      	cpsid	i
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	b662      	cpsie	i
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e7fe      	b.n	8006298 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d06a      	beq.n	8006376 <pvPortMalloc+0x14a>
 80062a0:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <pvPortMalloc+0x184>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d865      	bhi.n	8006376 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062aa:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <pvPortMalloc+0x188>)
 80062ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062ae:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <pvPortMalloc+0x188>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062b4:	e004      	b.n	80062c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d903      	bls.n	80062d2 <pvPortMalloc+0xa6>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f1      	bne.n	80062b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062d2:	4b35      	ldr	r3, [pc, #212]	; (80063a8 <pvPortMalloc+0x17c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d8:	429a      	cmp	r2, r3
 80062da:	d04c      	beq.n	8006376 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2208      	movs	r2, #8
 80062e2:	4413      	add	r3, r2
 80062e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	2308      	movs	r3, #8
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d920      	bls.n	8006340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4413      	add	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <pvPortMalloc+0xfc>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	e7fe      	b.n	8006326 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800633a:	69b8      	ldr	r0, [r7, #24]
 800633c:	f000 f8fc 	bl	8006538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <pvPortMalloc+0x184>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <pvPortMalloc+0x184>)
 800634c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800634e:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <pvPortMalloc+0x184>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <pvPortMalloc+0x18c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d203      	bcs.n	8006362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <pvPortMalloc+0x184>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <pvPortMalloc+0x18c>)
 8006360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <pvPortMalloc+0x180>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	431a      	orrs	r2, r3
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006376:	f7fe fd1f 	bl	8004db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <pvPortMalloc+0x170>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e7fe      	b.n	800639a <pvPortMalloc+0x16e>
	return pvReturn;
 800639c:	69fb      	ldr	r3, [r7, #28]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3728      	adds	r7, #40	; 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20004924 	.word	0x20004924
 80063ac:	20004930 	.word	0x20004930
 80063b0:	20004928 	.word	0x20004928
 80063b4:	2000491c 	.word	0x2000491c
 80063b8:	2000492c 	.word	0x2000492c

080063bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04a      	beq.n	8006464 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063ce:	2308      	movs	r3, #8
 80063d0:	425b      	negs	r3, r3
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4b22      	ldr	r3, [pc, #136]	; (800646c <vPortFree+0xb0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <vPortFree+0x46>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	b672      	cpsid	i
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	b662      	cpsie	i
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e7fe      	b.n	8006400 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <vPortFree+0x66>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	b672      	cpsid	i
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	b662      	cpsie	i
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	e7fe      	b.n	8006420 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <vPortFree+0xb0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d019      	beq.n	8006464 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d115      	bne.n	8006464 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <vPortFree+0xb0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	43db      	mvns	r3, r3
 8006442:	401a      	ands	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006448:	f7fe fca8 	bl	8004d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <vPortFree+0xb4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4413      	add	r3, r2
 8006456:	4a06      	ldr	r2, [pc, #24]	; (8006470 <vPortFree+0xb4>)
 8006458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f000 f86c 	bl	8006538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006460:	f7fe fcaa 	bl	8004db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006464:	bf00      	nop
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20004930 	.word	0x20004930
 8006470:	20004928 	.word	0x20004928

08006474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800647a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800647e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006480:	4b27      	ldr	r3, [pc, #156]	; (8006520 <prvHeapInit+0xac>)
 8006482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3307      	adds	r3, #7
 8006492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <prvHeapInit+0xac>)
 80064a4:	4413      	add	r3, r2
 80064a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064ac:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <prvHeapInit+0xb0>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064b2:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <prvHeapInit+0xb0>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	4413      	add	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064c0:	2208      	movs	r2, #8
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <prvHeapInit+0xb4>)
 80064d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064d6:	4b14      	ldr	r3, [pc, #80]	; (8006528 <prvHeapInit+0xb4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064de:	4b12      	ldr	r3, [pc, #72]	; (8006528 <prvHeapInit+0xb4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <prvHeapInit+0xb4>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a0a      	ldr	r2, [pc, #40]	; (800652c <prvHeapInit+0xb8>)
 8006502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a09      	ldr	r2, [pc, #36]	; (8006530 <prvHeapInit+0xbc>)
 800650a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <prvHeapInit+0xc0>)
 800650e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006512:	601a      	str	r2, [r3, #0]
}
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20000d1c 	.word	0x20000d1c
 8006524:	2000491c 	.word	0x2000491c
 8006528:	20004924 	.word	0x20004924
 800652c:	2000492c 	.word	0x2000492c
 8006530:	20004928 	.word	0x20004928
 8006534:	20004930 	.word	0x20004930

08006538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <prvInsertBlockIntoFreeList+0xac>)
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e002      	b.n	800654c <prvInsertBlockIntoFreeList+0x14>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d8f7      	bhi.n	8006546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4413      	add	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d108      	bne.n	800657a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	441a      	add	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	441a      	add	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d118      	bne.n	80065c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d00d      	beq.n	80065b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e008      	b.n	80065c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065b6:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <prvInsertBlockIntoFreeList+0xb0>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e003      	b.n	80065c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d002      	beq.n	80065d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	2000491c 	.word	0x2000491c
 80065e8:	20004924 	.word	0x20004924

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4e0d      	ldr	r6, [pc, #52]	; (8006624 <__libc_init_array+0x38>)
 80065f0:	4c0d      	ldr	r4, [pc, #52]	; (8006628 <__libc_init_array+0x3c>)
 80065f2:	1ba4      	subs	r4, r4, r6
 80065f4:	10a4      	asrs	r4, r4, #2
 80065f6:	2500      	movs	r5, #0
 80065f8:	42a5      	cmp	r5, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	4e0b      	ldr	r6, [pc, #44]	; (800662c <__libc_init_array+0x40>)
 80065fe:	4c0c      	ldr	r4, [pc, #48]	; (8006630 <__libc_init_array+0x44>)
 8006600:	f000 f82c 	bl	800665c <_init>
 8006604:	1ba4      	subs	r4, r4, r6
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	2500      	movs	r5, #0
 800660a:	42a5      	cmp	r5, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006614:	4798      	blx	r3
 8006616:	3501      	adds	r5, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800661e:	4798      	blx	r3
 8006620:	3501      	adds	r5, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	080066ec 	.word	0x080066ec
 8006628:	080066ec 	.word	0x080066ec
 800662c:	080066ec 	.word	0x080066ec
 8006630:	080066f0 	.word	0x080066f0

08006634 <memcpy>:
 8006634:	b510      	push	{r4, lr}
 8006636:	1e43      	subs	r3, r0, #1
 8006638:	440a      	add	r2, r1
 800663a:	4291      	cmp	r1, r2
 800663c:	d100      	bne.n	8006640 <memcpy+0xc>
 800663e:	bd10      	pop	{r4, pc}
 8006640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006648:	e7f7      	b.n	800663a <memcpy+0x6>

0800664a <memset>:
 800664a:	4402      	add	r2, r0
 800664c:	4603      	mov	r3, r0
 800664e:	4293      	cmp	r3, r2
 8006650:	d100      	bne.n	8006654 <memset+0xa>
 8006652:	4770      	bx	lr
 8006654:	f803 1b01 	strb.w	r1, [r3], #1
 8006658:	e7f9      	b.n	800664e <memset+0x4>
	...

0800665c <_init>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr

08006668 <_fini>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr
