
freertos_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006494  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080066e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e40  20000010  080066f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e50  080066f4  00024e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da13  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003724  00000000  00000000  0003da53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e8  00000000  00000000  00041178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003a43  00000000  00000000  00043fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c5f  00000000  00000000  00047a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fae67  00000000  00000000  0005b682  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001564e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  00156564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800664c 	.word	0x0800664c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800664c 	.word	0x0800664c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbca 	bl	8000cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f835 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f927 	bl	8000770 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f8c7 	bl	80006b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 f8f5 	bl	8000714 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f003 fad5 	bl	8003ad8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0x5c>)
 8000530:	2100      	movs	r1, #0
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x60>)
 8000534:	f003 fb3a 	bl	8003bac <osThreadNew>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0x64>)
 800053c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTask1, (signed char *) "Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800053e:	2300      	movs	r3, #0
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	490b      	ldr	r1, [pc, #44]	; (8000578 <main+0x68>)
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <main+0x6c>)
 800054e:	f004 fa3f 	bl	80049d0 <xTaskCreate>
  xTaskCreate(vTask2, ( signed char * ) "Task2", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	4908      	ldr	r1, [pc, #32]	; (8000580 <main+0x70>)
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x74>)
 8000562:	f004 fa35 	bl	80049d0 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f003 faeb 	bl	8003b40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x5a>
 800056c:	08006698 	.word	0x08006698
 8000570:	0800097d 	.word	0x0800097d
 8000574:	20004934 	.word	0x20004934
 8000578:	08006670 	.word	0x08006670
 800057c:	0800093d 	.word	0x0800093d
 8000580:	08006678 	.word	0x08006678
 8000584:	0800095d 	.word	0x0800095d

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0b4      	sub	sp, #208	; 0xd0
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 f84f 	bl	800663a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2284      	movs	r2, #132	; 0x84
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f006 f840 	bl	800663a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f000 ffcf 	bl	800155c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <SystemClock_Config+0x120>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	4a39      	ldr	r2, [pc, #228]	; (80006a8 <SystemClock_Config+0x120>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <SystemClock_Config+0x120>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <SystemClock_Config+0x124>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a34      	ldr	r2, [pc, #208]	; (80006ac <SystemClock_Config+0x124>)
 80005dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b32      	ldr	r3, [pc, #200]	; (80006ac <SystemClock_Config+0x124>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060a:	2304      	movs	r3, #4
 800060c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000610:	23d8      	movs	r3, #216	; 0xd8
 8000612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800061c:	2309      	movs	r3, #9
 800061e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fff8 	bl	800161c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000632:	f000 f9bd 	bl	80009b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000636:	f000 ffa1 	bl	800157c <HAL_PWREx_EnableOverDrive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000640:	f000 f9b6 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000666:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800066a:	2107      	movs	r1, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fa79 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000678:	f000 f99a 	bl	80009b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <SystemClock_Config+0x128>)
 800067e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc92 	bl	8001fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800069a:	f000 f989 	bl	80009b0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	37d0      	adds	r7, #208	; 0xd0
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000
 80006b0:	00200100 	.word	0x00200100

080006b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART3_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART3_UART_Init+0x58>)
 80006f8:	f002 fb2e 	bl	8002d58 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f955 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20004938 	.word	0x20004938
 8000710:	40004800 	.word	0x40004800

08000714 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800071e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2206      	movs	r2, #6
 8000724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2202      	movs	r2, #2
 800072a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	2202      	movs	r2, #2
 8000736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	2201      	movs	r2, #1
 800073c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074c:	2201      	movs	r2, #1
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	f000 fdb7 	bl	80012ca <HAL_PCD_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f925 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200049bc 	.word	0x200049bc

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b67      	ldr	r3, [pc, #412]	; (8000924 <MX_GPIO_Init+0x1b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a66      	ldr	r2, [pc, #408]	; (8000924 <MX_GPIO_Init+0x1b4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b64      	ldr	r3, [pc, #400]	; (8000924 <MX_GPIO_Init+0x1b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a60      	ldr	r2, [pc, #384]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a5a      	ldr	r2, [pc, #360]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b58      	ldr	r3, [pc, #352]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b55      	ldr	r3, [pc, #340]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a54      	ldr	r2, [pc, #336]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b52      	ldr	r3, [pc, #328]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4e      	ldr	r2, [pc, #312]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <MX_GPIO_Init+0x1b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	4b49      	ldr	r3, [pc, #292]	; (8000924 <MX_GPIO_Init+0x1b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a48      	ldr	r2, [pc, #288]	; (8000924 <MX_GPIO_Init+0x1b4>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b46      	ldr	r3, [pc, #280]	; (8000924 <MX_GPIO_Init+0x1b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0181 	movw	r1, #16513	; 0x4081
 800081c:	4842      	ldr	r0, [pc, #264]	; (8000928 <MX_GPIO_Init+0x1b8>)
 800081e:	f000 fd21 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4841      	ldr	r0, [pc, #260]	; (800092c <MX_GPIO_Init+0x1bc>)
 8000828:	f000 fd1c 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <MX_GPIO_Init+0x1c0>)
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483c      	ldr	r0, [pc, #240]	; (8000934 <MX_GPIO_Init+0x1c4>)
 8000842:	f000 fb65 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000846:	2332      	movs	r3, #50	; 0x32
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000856:	230b      	movs	r3, #11
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4834      	ldr	r0, [pc, #208]	; (8000934 <MX_GPIO_Init+0x1c4>)
 8000862:	f000 fb55 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000866:	2386      	movs	r3, #134	; 0x86
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000876:	230b      	movs	r3, #11
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	482d      	ldr	r0, [pc, #180]	; (8000938 <MX_GPIO_Init+0x1c8>)
 8000882:	f000 fb45 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000886:	f244 0381 	movw	r3, #16513	; 0x4081
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_GPIO_Init+0x1b8>)
 80008a0:	f000 fb36 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b6:	230b      	movs	r3, #11
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <MX_GPIO_Init+0x1b8>)
 80008c2:	f000 fb25 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_GPIO_Init+0x1bc>)
 80008de:	f000 fb17 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_GPIO_Init+0x1bc>)
 80008f6:	f000 fb0b 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090c:	230b      	movs	r3, #11
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_GPIO_Init+0x1bc>)
 8000918:	f000 fafa 	bl	8000f10 <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40021800 	.word	0x40021800
 8000930:	10110000 	.word	0x10110000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000

0800093c <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1( void *pvParameters )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	volatile unsigned long ul;
	/* Как и большинство задач, эта задача содержит
	/* бесконечный цикл */
	for( ;; ){

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000944:	2101      	movs	r1, #1
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <vTask1+0x1c>)
 8000948:	f000 fca5 	bl	8001296 <HAL_GPIO_TogglePin>
		osDelay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f003 f9d2 	bl	8003cf8 <osDelay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000954:	e7f6      	b.n	8000944 <vTask1+0x8>
 8000956:	bf00      	nop
 8000958:	40020400 	.word	0x40020400

0800095c <vTask2>:
	/* заведомо не произойдет) */
	vTaskDelete( NULL );
}

void vTask2( void *pvParameters )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	volatile unsigned long ul;
	for( ;; ){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <vTask2+0x1c>)
 8000968:	f000 fc95 	bl	8001296 <HAL_GPIO_TogglePin>
		osDelay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f003 f9c2 	bl	8003cf8 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000974:	e7f6      	b.n	8000964 <vTask2+0x8>
 8000976:	bf00      	nop
 8000978:	40020400 	.word	0x40020400

0800097c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f003 f9b7 	bl	8003cf8 <osDelay>
 800098a:	e7fb      	b.n	8000984 <StartDefaultTask+0x8>

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f000 f993 	bl	8000cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010000 	.word	0x40010000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <Error_Handler+0x6>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	f06f 0001 	mvn.w	r0, #1
 80009f6:	f000 fa61 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d128      	bne.n	8000a7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_UART_MspInit+0x80>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_UART_MspInit+0x84>)
 8000a78:	f000 fa4a 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004800 	.word	0x40004800
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020c00 	.word	0x40020c00

08000a90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ab0:	d141      	bne.n	8000b36 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000adc:	230a      	movs	r3, #10
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <HAL_PCD_MspInit+0xb4>)
 8000ae8:	f000 fa12 	bl	8000f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <HAL_PCD_MspInit+0xb4>)
 8000b02:	f000 fa05 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b10:	6353      	str	r3, [r2, #52]	; 0x34
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_PCD_MspInit+0xb0>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2019      	movs	r0, #25
 8000b5e:	f000 f9ad 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f9c6 	bl	8000ef4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f9e2 	bl	8001f54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b90:	f001 f9cc 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_InitTick+0xa4>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bca:	f001 fde5 	bl	8002798 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bd6:	f001 fe41 	bl	800285c <HAL_TIM_Base_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20004dc0 	.word	0x20004dc0
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2a:	f001 fe8f 	bl	800294c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20004dc0 	.word	0x20004dc0

08000c38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f005 fca7 	bl	80065dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc3f 	bl	8000510 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca0:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8000ca4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca8:	20004e50 	.word	0x20004e50

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>

08000cae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f8f7 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff45 	bl	8000b48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000cbe:	f7ff fe7b 	bl	80009b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20004e0c 	.word	0x20004e0c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20004e0c 	.word	0x20004e0c

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_Delay+0x40>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	05fa0000 	.word	0x05fa0000

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e175      	b.n	800121c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8164 	bne.w	8001216 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d00b      	beq.n	8000f6e <HAL_GPIO_Init+0x5e>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f62:	2b11      	cmp	r3, #17
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x100>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80be 	beq.w	8001216 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <HAL_GPIO_Init+0x320>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a64      	ldr	r2, [pc, #400]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b62      	ldr	r3, [pc, #392]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010b2:	4a60      	ldr	r2, [pc, #384]	; (8001234 <HAL_GPIO_Init+0x324>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a57      	ldr	r2, [pc, #348]	; (8001238 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d037      	beq.n	800114e <HAL_GPIO_Init+0x23e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d031      	beq.n	800114a <HAL_GPIO_Init+0x23a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <HAL_GPIO_Init+0x236>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a54      	ldr	r2, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x334>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x232>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a53      	ldr	r2, [pc, #332]	; (8001248 <HAL_GPIO_Init+0x338>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x22e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x33c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x22a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x340>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x344>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x348>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x34c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x21a>
 8001126:	2309      	movs	r3, #9
 8001128:	e012      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800112a:	230a      	movs	r3, #10
 800112c:	e010      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800112e:	2308      	movs	r3, #8
 8001130:	e00e      	b.n	8001150 <HAL_GPIO_Init+0x240>
 8001132:	2307      	movs	r3, #7
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x240>
 8001136:	2306      	movs	r3, #6
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x240>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x240>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x240>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001160:	4934      	ldr	r1, [pc, #208]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <HAL_GPIO_Init+0x350>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_GPIO_Init+0x350>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_GPIO_Init+0x350>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011bc:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_GPIO_Init+0x350>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_GPIO_Init+0x350>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <HAL_GPIO_Init+0x350>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_GPIO_Init+0x350>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_GPIO_Init+0x350>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae86 	bls.w	8000f30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	; 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40021c00 	.word	0x40021c00
 8001258:	40022000 	.word	0x40022000
 800125c:	40022400 	.word	0x40022400
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	400b      	ands	r3, r1
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012cc:	b08f      	sub	sp, #60	; 0x3c
 80012ce:	af0a      	add	r7, sp, #40	; 0x28
 80012d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e116      	b.n	800150a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fbca 	bl	8000a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f974 	bl	8003608 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	687e      	ldr	r6, [r7, #4]
 8001328:	466d      	mov	r5, sp
 800132a:	f106 0410 	add.w	r4, r6, #16
 800132e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800133a:	e885 0003 	stmia.w	r5, {r0, r1}
 800133e:	1d33      	adds	r3, r6, #4
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f002 f908 	bl	8003558 <USB_CoreInit>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0d7      	b.n	800150a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f002 f962 	bl	800362a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e04a      	b.n	8001402 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	333d      	adds	r3, #61	; 0x3d
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	333c      	adds	r3, #60	; 0x3c
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	b298      	uxth	r0, r3
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	3342      	adds	r3, #66	; 0x42
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	333f      	adds	r3, #63	; 0x3f
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3344      	adds	r3, #68	; 0x44
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3348      	adds	r3, #72	; 0x48
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3301      	adds	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3af      	bcc.n	800136c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e044      	b.n	800149c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3b5      	bcc.n	8001412 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c4:	1d33      	adds	r3, r6, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f002 f8d9 	bl	8003680 <USB_DevInit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e014      	b.n	800150a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f80b 	bl	8001514 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fa8b 	bl	8003a1e <USB_DevDisconnect>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001514 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_PCDEx_ActivateLPM+0x44>)
 8001544:	4313      	orrs	r3, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	10000003 	.word	0x10000003

0800155c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_PWREx_EnableOverDrive+0x98>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <HAL_PWREx_EnableOverDrive+0x98>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_PWREx_EnableOverDrive+0x98>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015aa:	f7ff fba1 	bl	8000cf0 <HAL_GetTick>
 80015ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015b0:	e009      	b.n	80015c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b2:	f7ff fb9d 	bl	8000cf0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c0:	d901      	bls.n	80015c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e022      	b.n	800160c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d2:	d1ee      	bne.n	80015b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff fb86 	bl	8000cf0 <HAL_GetTick>
 80015e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015e6:	e009      	b.n	80015fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015e8:	f7ff fb82 	bl	8000cf0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f6:	d901      	bls.n	80015fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e007      	b.n	800160c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001608:	d1ee      	bne.n	80015e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000

0800161c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e291      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8087 	beq.w	800174e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001640:	4b96      	ldr	r3, [pc, #600]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d00c      	beq.n	8001666 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164c:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d112      	bne.n	800167e <HAL_RCC_OscConfig+0x62>
 8001658:	4b90      	ldr	r3, [pc, #576]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001664:	d10b      	bne.n	800167e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	4b8d      	ldr	r3, [pc, #564]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06c      	beq.n	800174c <HAL_RCC_OscConfig+0x130>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d168      	bne.n	800174c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e26b      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x7a>
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a83      	ldr	r2, [pc, #524]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e02e      	b.n	80016f4 <HAL_RCC_OscConfig+0xd8>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x9c>
 800169e:	4b7f      	ldr	r3, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7e      	ldr	r2, [pc, #504]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b7c      	ldr	r3, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xd8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0xc0>
 80016c2:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a75      	ldr	r2, [pc, #468]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b73      	ldr	r3, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a72      	ldr	r2, [pc, #456]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xd8>
 80016dc:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b6c      	ldr	r3, [pc, #432]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6b      	ldr	r2, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff faf8 	bl	8000cf0 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff faf4 	bl	8000cf0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e21f      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xe8>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fae4 	bl	8000cf0 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fae0 	bl	8000cf0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e20b      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x110>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d069      	beq.n	800182e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x190>
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x17a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1df      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	493d      	ldr	r1, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e040      	b.n	800182e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d023      	beq.n	80017fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa96 	bl	8000cf0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa92 	bl	8000cf0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1bd      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4929      	ldr	r1, [pc, #164]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
 80017fa:	e018      	b.n	800182e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x280>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fa72 	bl	8000cf0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fa6e 	bl	8000cf0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e199      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d038      	beq.n	80018ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d019      	beq.n	8001876 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fa4f 	bl	8000cf0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fa4b 	bl	8000cf0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e176      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x23a>
 8001874:	e01a      	b.n	80018ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x280>)
 8001878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_RCC_OscConfig+0x280>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001882:	f7ff fa35 	bl	8000cf0 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff fa31 	bl	8000cf0 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d903      	bls.n	80018a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e15c      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
 800189c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ee      	bne.n	800188a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a4 	beq.w	8001a02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7e      	ldr	r2, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f9f9 	bl	8000cf0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff f9f5 	bl	8000cf0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	; 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e120      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4d0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x31a>
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	e02d      	b.n	8001992 <HAL_RCC_OscConfig+0x376>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x33c>
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6713      	str	r3, [r2, #112]	; 0x70
 8001956:	e01c      	b.n	8001992 <HAL_RCC_OscConfig+0x376>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d10c      	bne.n	800197a <HAL_RCC_OscConfig+0x35e>
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0x376>
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d015      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff f9a9 	bl	8000cf0 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f9a5 	bl	8000cf0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0ce      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <HAL_RCC_OscConfig+0x386>
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff f993 	bl	8000cf0 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff f98f 	bl	8000cf0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ee      	bne.n	80019ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 80019fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a4 	beq.w	8001b54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d06b      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d149      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f960 	bl	8000cf0 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f95c 	bl	8000cf0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e087      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	4313      	orrs	r3, r2
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f930 	bl	8000cf0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f92c 	bl	8000cf0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e057      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x478>
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f916 	bl	8000cf0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f912 	bl	8000cf0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e03d      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4ac>
 8001ae6:	e035      	b.n	8001b54 <HAL_RCC_OscConfig+0x538>
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x544>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d028      	beq.n	8001b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d121      	bne.n	8001b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d111      	bne.n	8001b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d0      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020f 	bic.w	r2, r3, #15
 8001b92:	4965      	ldr	r1, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d040      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e073      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06b      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4936      	ldr	r1, [pc, #216]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff f84a 	bl	8000cf0 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff f846 	bl	8000cf0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e053      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d210      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	4922      	ldr	r1, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1cc>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1d0>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1d4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff16 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	080066bc 	.word	0x080066bc
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d007      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x32>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d008      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x38>
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80b4 	bne.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d6a:	60bb      	str	r3, [r7, #8]
      break;
 8001d6c:	e0b3      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d70:	60bb      	str	r3, [r7, #8]
      break;
 8001d72:	e0b0      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d7e:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04a      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	f04f 0400 	mov.w	r4, #0
 8001d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	ea03 0501 	and.w	r5, r3, r1
 8001da0:	ea04 0602 	and.w	r6, r4, r2
 8001da4:	4629      	mov	r1, r5
 8001da6:	4632      	mov	r2, r6
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f04f 0400 	mov.w	r4, #0
 8001db0:	0154      	lsls	r4, r2, #5
 8001db2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001db6:	014b      	lsls	r3, r1, #5
 8001db8:	4619      	mov	r1, r3
 8001dba:	4622      	mov	r2, r4
 8001dbc:	1b49      	subs	r1, r1, r5
 8001dbe:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f04f 0400 	mov.w	r4, #0
 8001dca:	0194      	lsls	r4, r2, #6
 8001dcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd0:	018b      	lsls	r3, r1, #6
 8001dd2:	1a5b      	subs	r3, r3, r1
 8001dd4:	eb64 0402 	sbc.w	r4, r4, r2
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	00e2      	lsls	r2, r4, #3
 8001de2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	460b      	mov	r3, r1
 8001dea:	4614      	mov	r4, r2
 8001dec:	195b      	adds	r3, r3, r5
 8001dee:	eb44 0406 	adc.w	r4, r4, r6
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	0262      	lsls	r2, r4, #9
 8001dfc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e00:	0259      	lsls	r1, r3, #9
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	4621      	mov	r1, r4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f04f 0400 	mov.w	r4, #0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	f7fe f9fc 	bl	8000210 <__aeabi_uldivmod>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e049      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e20:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	f04f 0400 	mov.w	r4, #0
 8001e2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	ea03 0501 	and.w	r5, r3, r1
 8001e36:	ea04 0602 	and.w	r6, r4, r2
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	4632      	mov	r2, r6
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	f04f 0400 	mov.w	r4, #0
 8001e46:	0154      	lsls	r4, r2, #5
 8001e48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e4c:	014b      	lsls	r3, r1, #5
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4622      	mov	r2, r4
 8001e52:	1b49      	subs	r1, r1, r5
 8001e54:	eb62 0206 	sbc.w	r2, r2, r6
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	0194      	lsls	r4, r2, #6
 8001e62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	1a5b      	subs	r3, r3, r1
 8001e6a:	eb64 0402 	sbc.w	r4, r4, r2
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	00e2      	lsls	r2, r4, #3
 8001e78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e7c:	00d9      	lsls	r1, r3, #3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	195b      	adds	r3, r3, r5
 8001e84:	eb44 0406 	adc.w	r4, r4, r6
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	02a2      	lsls	r2, r4, #10
 8001e92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e96:	0299      	lsls	r1, r3, #10
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f04f 0400 	mov.w	r4, #0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4623      	mov	r3, r4
 8001eaa:	f7fe f9b1 	bl	8000210 <__aeabi_uldivmod>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	60bb      	str	r3, [r7, #8]
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ed2:	60bb      	str	r3, [r7, #8]
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f08:	f7ff fff0 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0a9b      	lsrs	r3, r3, #10
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	080066cc 	.word	0x080066cc

08001f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f30:	f7ff ffdc 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f34:	4601      	mov	r1, r0
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0b5b      	lsrs	r3, r3, #13
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	080066cc 	.word	0x080066cc

08001f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	220f      	movs	r2, #15
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetClockConfig+0x60>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 020f 	and.w	r2, r3, #15
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fe0:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fea:	6093      	str	r3, [r2, #8]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	4964      	ldr	r1, [pc, #400]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	4959      	ldr	r1, [pc, #356]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002030:	d101      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d017      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	494a      	ldr	r1, [pc, #296]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d101      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 808b 	beq.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a39      	ldr	r2, [pc, #228]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c0:	f7fe fe16 	bl	8000cf0 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fe12 	bl	8000cf0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e357      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d035      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d02e      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d114      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fdda 	bl	8000cf0 <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fdd6 	bl	8000cf0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e319      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800216e:	d111      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800217e:	400b      	ands	r3, r1
 8002180:	4901      	ldr	r1, [pc, #4]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
 8002186:	e00b      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000
 8002190:	0ffffcff 	.word	0x0ffffcff
 8002194:	4bb1      	ldr	r3, [pc, #708]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4ab0      	ldr	r2, [pc, #704]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	4bae      	ldr	r3, [pc, #696]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	49ab      	ldr	r1, [pc, #684]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021be:	4ba7      	ldr	r3, [pc, #668]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c4:	4aa5      	ldr	r2, [pc, #660]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	49a0      	ldr	r1, [pc, #640]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ec:	4b9b      	ldr	r3, [pc, #620]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fa:	4998      	ldr	r1, [pc, #608]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800220e:	4b93      	ldr	r3, [pc, #588]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800221c:	498f      	ldr	r1, [pc, #572]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002230:	4b8a      	ldr	r3, [pc, #552]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	4987      	ldr	r1, [pc, #540]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	497e      	ldr	r1, [pc, #504]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4976      	ldr	r1, [pc, #472]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002296:	4b71      	ldr	r3, [pc, #452]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f023 020c 	bic.w	r2, r3, #12
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	496d      	ldr	r1, [pc, #436]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022da:	4b60      	ldr	r3, [pc, #384]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	495c      	ldr	r1, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fc:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	4954      	ldr	r1, [pc, #336]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	494b      	ldr	r1, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002340:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	4943      	ldr	r1, [pc, #268]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	493a      	ldr	r1, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002392:	4932      	ldr	r1, [pc, #200]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d011      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b4:	4929      	ldr	r1, [pc, #164]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c4:	d101      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	4919      	ldr	r1, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002418:	4910      	ldr	r1, [pc, #64]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d006      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80d9 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800243e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002440:	f7fe fc56 	bl	8000cf0 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002446:	e00b      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002448:	f7fe fc52 	bl	8000cf0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d904      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e197      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002460:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ed      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d021      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002480:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002494:	0e1b      	lsrs	r3, r3, #24
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	019a      	lsls	r2, r3, #6
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	071b      	lsls	r3, r3, #28
 80024b4:	4957      	ldr	r1, [pc, #348]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d129      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fc:	0f1b      	lsrs	r3, r3, #28
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	019a      	lsls	r2, r3, #6
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	071b      	lsls	r3, r3, #28
 800251c:	493d      	ldr	r1, [pc, #244]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252a:	f023 021f 	bic.w	r2, r3, #31
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01d      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0e1b      	lsrs	r3, r3, #24
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	0f1b      	lsrs	r3, r3, #28
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	019a      	lsls	r2, r3, #6
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	431a      	orrs	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	071b      	lsls	r3, r3, #28
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d011      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	019a      	lsls	r2, r3, #6
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	071b      	lsls	r3, r3, #28
 80025ac:	4919      	ldr	r1, [pc, #100]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe fb96 	bl	8000cf0 <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025c8:	f7fe fb92 	bl	8000cf0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0d7      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 80cd 	bne.w	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fa:	f7fe fb79 	bl	8000cf0 <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002602:	f7fe fb75 	bl	8000cf0 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d903      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0ba      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002614:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002618:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002624:	d0ed      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d12a      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	0f1b      	lsrs	r3, r3, #28
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	019a      	lsls	r2, r3, #6
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	061b      	lsls	r3, r3, #24
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	4944      	ldr	r1, [pc, #272]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002690:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	493d      	ldr	r1, [pc, #244]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d022      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b8:	d11d      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	0f1b      	lsrs	r3, r3, #28
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	019a      	lsls	r2, r3, #6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d028      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	071b      	lsls	r3, r3, #28
 8002736:	4917      	ldr	r1, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4911      	ldr	r1, [pc, #68]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fac6 	bl	8000cf0 <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002768:	f7fe fac2 	bl	8000cf0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e007      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002786:	d1ef      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e049      	b.n	800283e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f841 	bl	8002846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 fa00 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e054      	b.n	800291e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a26      	ldr	r2, [pc, #152]	; (800292c <HAL_TIM_Base_Start_IT+0xd0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d01d      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_TIM_Base_Start_IT+0xd4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d018      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_TIM_Base_Start_IT+0xd8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_TIM_Base_Start_IT+0xdc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_TIM_Base_Start_IT+0xe0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_TIM_Base_Start_IT+0xe4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x80>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_TIM_Base_Start_IT+0xe8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d115      	bne.n	8002908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_TIM_Base_Start_IT+0xec>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d015      	beq.n	800291a <HAL_TIM_Base_Start_IT+0xbe>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d011      	beq.n	800291a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	e008      	b.n	800291a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e000      	b.n	800291c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40010400 	.word	0x40010400
 8002940:	40014000 	.word	0x40014000
 8002944:	40001800 	.word	0x40001800
 8002948:	00010007 	.word	0x00010007

0800294c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0202 	mvn.w	r2, #2
 8002978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f905 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8f7 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f908 	bl	8002bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0204 	mvn.w	r2, #4
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8db 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8cd 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8de 	bl	8002bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0208 	mvn.w	r2, #8
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2204      	movs	r2, #4
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8b1 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8a3 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8b4 	bl	8002bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f887 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f879 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f88a 	bl	8002bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0201 	mvn.w	r2, #1
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fd ff5e 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f91a 	bl	8002d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f90d 	bl	8002d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f838 	bl	8002bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0220 	mvn.w	r2, #32
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f8cd 	bl	8002d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d027      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d023      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d017      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <TIM_Base_SetConfig+0x128>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <TIM_Base_SetConfig+0x12c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <TIM_Base_SetConfig+0x130>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <TIM_Base_SetConfig+0x134>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <TIM_Base_SetConfig+0x138>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <TIM_Base_SetConfig+0x13c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0xf8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40010400 	.word	0x40010400
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40014400 	.word	0x40014400
 8002d0c:	40014800 	.word	0x40014800
 8002d10:	40001800 	.word	0x40001800
 8002d14:	40001c00 	.word	0x40001c00
 8002d18:	40002000 	.word	0x40002000

08002d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e040      	b.n	8002dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fe44 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f82c 	bl	8002df4 <UART_SetConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e022      	b.n	8002dec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa80 	bl	80032b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fb07 	bl	80033f8 <UART_CheckIdleState>
 8002dea:	4603      	mov	r3, r0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4bb1      	ldr	r3, [pc, #708]	; (80030e4 <UART_SetConfig+0x2f0>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6979      	ldr	r1, [r7, #20]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a9f      	ldr	r2, [pc, #636]	; (80030e8 <UART_SetConfig+0x2f4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d121      	bne.n	8002eb4 <UART_SetConfig+0xc0>
 8002e70:	4b9e      	ldr	r3, [pc, #632]	; (80030ec <UART_SetConfig+0x2f8>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d816      	bhi.n	8002eac <UART_SetConfig+0xb8>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0x90>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002e9b 	.word	0x08002e9b
 8002e90:	08002ea7 	.word	0x08002ea7
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e151      	b.n	800313e <UART_SetConfig+0x34a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e14e      	b.n	800313e <UART_SetConfig+0x34a>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e14b      	b.n	800313e <UART_SetConfig+0x34a>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e148      	b.n	800313e <UART_SetConfig+0x34a>
 8002eac:	2310      	movs	r3, #16
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	bf00      	nop
 8002eb2:	e144      	b.n	800313e <UART_SetConfig+0x34a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8d      	ldr	r2, [pc, #564]	; (80030f0 <UART_SetConfig+0x2fc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d134      	bne.n	8002f28 <UART_SetConfig+0x134>
 8002ebe:	4b8b      	ldr	r3, [pc, #556]	; (80030ec <UART_SetConfig+0x2f8>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	d829      	bhi.n	8002f20 <UART_SetConfig+0x12c>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0xe0>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	08002f21 	.word	0x08002f21
 8002edc:	08002f21 	.word	0x08002f21
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f15 	.word	0x08002f15
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f0f 	.word	0x08002f0f
 8002ef8:	08002f21 	.word	0x08002f21
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	08002f1b 	.word	0x08002f1b
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e117      	b.n	800313e <UART_SetConfig+0x34a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e114      	b.n	800313e <UART_SetConfig+0x34a>
 8002f14:	2304      	movs	r3, #4
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e111      	b.n	800313e <UART_SetConfig+0x34a>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	77fb      	strb	r3, [r7, #31]
 8002f1e:	e10e      	b.n	800313e <UART_SetConfig+0x34a>
 8002f20:	2310      	movs	r3, #16
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	bf00      	nop
 8002f26:	e10a      	b.n	800313e <UART_SetConfig+0x34a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a71      	ldr	r2, [pc, #452]	; (80030f4 <UART_SetConfig+0x300>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d120      	bne.n	8002f74 <UART_SetConfig+0x180>
 8002f32:	4b6e      	ldr	r3, [pc, #440]	; (80030ec <UART_SetConfig+0x2f8>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d00f      	beq.n	8002f60 <UART_SetConfig+0x16c>
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d802      	bhi.n	8002f4a <UART_SetConfig+0x156>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <UART_SetConfig+0x160>
 8002f48:	e010      	b.n	8002f6c <UART_SetConfig+0x178>
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d005      	beq.n	8002f5a <UART_SetConfig+0x166>
 8002f4e:	2b30      	cmp	r3, #48	; 0x30
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x172>
 8002f52:	e00b      	b.n	8002f6c <UART_SetConfig+0x178>
 8002f54:	2300      	movs	r3, #0
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0f1      	b.n	800313e <UART_SetConfig+0x34a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e0ee      	b.n	800313e <UART_SetConfig+0x34a>
 8002f60:	2304      	movs	r3, #4
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e0eb      	b.n	800313e <UART_SetConfig+0x34a>
 8002f66:	2308      	movs	r3, #8
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e0e8      	b.n	800313e <UART_SetConfig+0x34a>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	bf00      	nop
 8002f72:	e0e4      	b.n	800313e <UART_SetConfig+0x34a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <UART_SetConfig+0x304>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d120      	bne.n	8002fc0 <UART_SetConfig+0x1cc>
 8002f7e:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <UART_SetConfig+0x2f8>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d00f      	beq.n	8002fac <UART_SetConfig+0x1b8>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d802      	bhi.n	8002f96 <UART_SetConfig+0x1a2>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <UART_SetConfig+0x1ac>
 8002f94:	e010      	b.n	8002fb8 <UART_SetConfig+0x1c4>
 8002f96:	2b80      	cmp	r3, #128	; 0x80
 8002f98:	d005      	beq.n	8002fa6 <UART_SetConfig+0x1b2>
 8002f9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f9c:	d009      	beq.n	8002fb2 <UART_SetConfig+0x1be>
 8002f9e:	e00b      	b.n	8002fb8 <UART_SetConfig+0x1c4>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e0cb      	b.n	800313e <UART_SetConfig+0x34a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e0c8      	b.n	800313e <UART_SetConfig+0x34a>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e0c5      	b.n	800313e <UART_SetConfig+0x34a>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e0c2      	b.n	800313e <UART_SetConfig+0x34a>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	bf00      	nop
 8002fbe:	e0be      	b.n	800313e <UART_SetConfig+0x34a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a4d      	ldr	r2, [pc, #308]	; (80030fc <UART_SetConfig+0x308>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d124      	bne.n	8003014 <UART_SetConfig+0x220>
 8002fca:	4b48      	ldr	r3, [pc, #288]	; (80030ec <UART_SetConfig+0x2f8>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd8:	d012      	beq.n	8003000 <UART_SetConfig+0x20c>
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fde:	d802      	bhi.n	8002fe6 <UART_SetConfig+0x1f2>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <UART_SetConfig+0x200>
 8002fe4:	e012      	b.n	800300c <UART_SetConfig+0x218>
 8002fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fea:	d006      	beq.n	8002ffa <UART_SetConfig+0x206>
 8002fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff0:	d009      	beq.n	8003006 <UART_SetConfig+0x212>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x218>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e0a1      	b.n	800313e <UART_SetConfig+0x34a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e09e      	b.n	800313e <UART_SetConfig+0x34a>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e09b      	b.n	800313e <UART_SetConfig+0x34a>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e098      	b.n	800313e <UART_SetConfig+0x34a>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	bf00      	nop
 8003012:	e094      	b.n	800313e <UART_SetConfig+0x34a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a39      	ldr	r2, [pc, #228]	; (8003100 <UART_SetConfig+0x30c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d124      	bne.n	8003068 <UART_SetConfig+0x274>
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <UART_SetConfig+0x2f8>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d012      	beq.n	8003054 <UART_SetConfig+0x260>
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d802      	bhi.n	800303a <UART_SetConfig+0x246>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <UART_SetConfig+0x254>
 8003038:	e012      	b.n	8003060 <UART_SetConfig+0x26c>
 800303a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303e:	d006      	beq.n	800304e <UART_SetConfig+0x25a>
 8003040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003044:	d009      	beq.n	800305a <UART_SetConfig+0x266>
 8003046:	e00b      	b.n	8003060 <UART_SetConfig+0x26c>
 8003048:	2301      	movs	r3, #1
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e077      	b.n	800313e <UART_SetConfig+0x34a>
 800304e:	2302      	movs	r3, #2
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e074      	b.n	800313e <UART_SetConfig+0x34a>
 8003054:	2304      	movs	r3, #4
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e071      	b.n	800313e <UART_SetConfig+0x34a>
 800305a:	2308      	movs	r3, #8
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e06e      	b.n	800313e <UART_SetConfig+0x34a>
 8003060:	2310      	movs	r3, #16
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	bf00      	nop
 8003066:	e06a      	b.n	800313e <UART_SetConfig+0x34a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a25      	ldr	r2, [pc, #148]	; (8003104 <UART_SetConfig+0x310>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d124      	bne.n	80030bc <UART_SetConfig+0x2c8>
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <UART_SetConfig+0x2f8>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d012      	beq.n	80030a8 <UART_SetConfig+0x2b4>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d802      	bhi.n	800308e <UART_SetConfig+0x29a>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <UART_SetConfig+0x2a8>
 800308c:	e012      	b.n	80030b4 <UART_SetConfig+0x2c0>
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d006      	beq.n	80030a2 <UART_SetConfig+0x2ae>
 8003094:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003098:	d009      	beq.n	80030ae <UART_SetConfig+0x2ba>
 800309a:	e00b      	b.n	80030b4 <UART_SetConfig+0x2c0>
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e04d      	b.n	800313e <UART_SetConfig+0x34a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e04a      	b.n	800313e <UART_SetConfig+0x34a>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e047      	b.n	800313e <UART_SetConfig+0x34a>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e044      	b.n	800313e <UART_SetConfig+0x34a>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	bf00      	nop
 80030ba:	e040      	b.n	800313e <UART_SetConfig+0x34a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <UART_SetConfig+0x314>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d139      	bne.n	800313a <UART_SetConfig+0x346>
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <UART_SetConfig+0x2f8>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d4:	d027      	beq.n	8003126 <UART_SetConfig+0x332>
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030da:	d817      	bhi.n	800310c <UART_SetConfig+0x318>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <UART_SetConfig+0x326>
 80030e0:	e027      	b.n	8003132 <UART_SetConfig+0x33e>
 80030e2:	bf00      	nop
 80030e4:	efff69f3 	.word	0xefff69f3
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40004400 	.word	0x40004400
 80030f4:	40004800 	.word	0x40004800
 80030f8:	40004c00 	.word	0x40004c00
 80030fc:	40005000 	.word	0x40005000
 8003100:	40011400 	.word	0x40011400
 8003104:	40007800 	.word	0x40007800
 8003108:	40007c00 	.word	0x40007c00
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d006      	beq.n	8003120 <UART_SetConfig+0x32c>
 8003112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003116:	d009      	beq.n	800312c <UART_SetConfig+0x338>
 8003118:	e00b      	b.n	8003132 <UART_SetConfig+0x33e>
 800311a:	2300      	movs	r3, #0
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e00e      	b.n	800313e <UART_SetConfig+0x34a>
 8003120:	2302      	movs	r3, #2
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e00b      	b.n	800313e <UART_SetConfig+0x34a>
 8003126:	2304      	movs	r3, #4
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e008      	b.n	800313e <UART_SetConfig+0x34a>
 800312c:	2308      	movs	r3, #8
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e005      	b.n	800313e <UART_SetConfig+0x34a>
 8003132:	2310      	movs	r3, #16
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	bf00      	nop
 8003138:	e001      	b.n	800313e <UART_SetConfig+0x34a>
 800313a:	2310      	movs	r3, #16
 800313c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003146:	d15b      	bne.n	8003200 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d827      	bhi.n	800319e <UART_SetConfig+0x3aa>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <UART_SetConfig+0x360>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003179 	.word	0x08003179
 8003158:	08003181 	.word	0x08003181
 800315c:	08003189 	.word	0x08003189
 8003160:	0800319f 	.word	0x0800319f
 8003164:	0800318f 	.word	0x0800318f
 8003168:	0800319f 	.word	0x0800319f
 800316c:	0800319f 	.word	0x0800319f
 8003170:	0800319f 	.word	0x0800319f
 8003174:	08003197 	.word	0x08003197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7fe fec4 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800317c:	61b8      	str	r0, [r7, #24]
        break;
 800317e:	e013      	b.n	80031a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7fe fed4 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003184:	61b8      	str	r0, [r7, #24]
        break;
 8003186:	e00f      	b.n	80031a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <UART_SetConfig+0x4bc>)
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e00c      	b.n	80031a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7fe fdd5 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003192:	61b8      	str	r0, [r7, #24]
        break;
 8003194:	e008      	b.n	80031a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e004      	b.n	80031a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	77bb      	strb	r3, [r7, #30]
        break;
 80031a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d074      	beq.n	8003298 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b0f      	cmp	r3, #15
 80031ca:	d916      	bls.n	80031fa <UART_SetConfig+0x406>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d2:	d212      	bcs.n	80031fa <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f023 030f 	bic.w	r3, r3, #15
 80031dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	89fa      	ldrh	r2, [r7, #14]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e04e      	b.n	8003298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77bb      	strb	r3, [r7, #30]
 80031fe:	e04b      	b.n	8003298 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d827      	bhi.n	8003256 <UART_SetConfig+0x462>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <UART_SetConfig+0x418>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003231 	.word	0x08003231
 8003210:	08003239 	.word	0x08003239
 8003214:	08003241 	.word	0x08003241
 8003218:	08003257 	.word	0x08003257
 800321c:	08003247 	.word	0x08003247
 8003220:	08003257 	.word	0x08003257
 8003224:	08003257 	.word	0x08003257
 8003228:	08003257 	.word	0x08003257
 800322c:	0800324f 	.word	0x0800324f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7fe fe68 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8003234:	61b8      	str	r0, [r7, #24]
        break;
 8003236:	e013      	b.n	8003260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe fe78 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 800323c:	61b8      	str	r0, [r7, #24]
        break;
 800323e:	e00f      	b.n	8003260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <UART_SetConfig+0x4bc>)
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e00c      	b.n	8003260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003246:	f7fe fd79 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 800324a:	61b8      	str	r0, [r7, #24]
        break;
 800324c:	e008      	b.n	8003260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e004      	b.n	8003260 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	77bb      	strb	r3, [r7, #30]
        break;
 800325e:	bf00      	nop
    }

    if (pclk != 0U)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d018      	beq.n	8003298 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085a      	lsrs	r2, r3, #1
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	d908      	bls.n	8003294 <UART_SetConfig+0x4a0>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d204      	bcs.n	8003294 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e001      	b.n	8003298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00f42400 	.word	0x00f42400

080032b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b2:	d10a      	bne.n	80033ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003408:	f7fd fc72 	bl	8000cf0 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d10e      	bne.n	800343a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f817 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00d      	b.n	8003456 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	e05e      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d05a      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fd fc3a 	bl	8000cf0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11b      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e043      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02c      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d124      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d091      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003558:	b084      	sub	sp, #16
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	f107 001c 	add.w	r0, r7, #28
 8003566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	d120      	bne.n	80035b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <USB_CoreInit+0xac>)
 8003582:	4013      	ands	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa5a 	bl	8003a60 <USB_CoreReset>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e010      	b.n	80035d4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa4e 	bl	8003a60 <USB_CoreReset>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10b      	bne.n	80035f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f043 0206 	orr.w	r2, r3, #6
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035fe:	b004      	add	sp, #16
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	ffbdffbf 	.word	0xffbdffbf

08003608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f023 0201 	bic.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e00b      	b.n	800366e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e001      	b.n	800366e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e003      	b.n	8003676 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800366e:	2032      	movs	r0, #50	; 0x32
 8003670:	f7fd fb4a 	bl	8000d08 <HAL_Delay>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003680:	b084      	sub	sp, #16
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	e009      	b.n	80036b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3340      	adds	r3, #64	; 0x40
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3301      	adds	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0e      	cmp	r3, #14
 80036b8:	d9f2      	bls.n	80036a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11c      	bne.n	80036fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e005      	b.n	8003706 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003718:	4619      	mov	r1, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	461a      	mov	r2, r3
 8003722:	680b      	ldr	r3, [r1, #0]
 8003724:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10c      	bne.n	8003746 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003732:	2100      	movs	r1, #0
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f959 	bl	80039ec <USB_SetDevSpeed>
 800373a:	e018      	b.n	800376e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800373c:	2101      	movs	r1, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f954 	bl	80039ec <USB_SetDevSpeed>
 8003744:	e013      	b.n	800376e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10c      	bne.n	8003766 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003752:	2100      	movs	r1, #0
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f949 	bl	80039ec <USB_SetDevSpeed>
 800375a:	e008      	b.n	800376e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800375c:	2101      	movs	r1, #1
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f944 	bl	80039ec <USB_SetDevSpeed>
 8003764:	e003      	b.n	800376e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003766:	2103      	movs	r1, #3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f93f 	bl	80039ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800376e:	2110      	movs	r1, #16
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8f3 	bl	800395c <USB_FlushTxFifo>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f911 	bl	80039a8 <USB_FlushRxFifo>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	461a      	mov	r2, r3
 80037b0:	2300      	movs	r3, #0
 80037b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e043      	b.n	8003842 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d118      	bne.n	8003804 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	461a      	mov	r2, r3
 80037e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e013      	b.n	8003816 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e008      	b.n	8003816 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	461a      	mov	r2, r3
 8003836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800383a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3301      	adds	r3, #1
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3b7      	bcc.n	80037ba <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e043      	b.n	80038d8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003866:	d118      	bne.n	800389a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e013      	b.n	80038ac <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e008      	b.n	80038ac <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b7      	bcc.n	8003850 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <USB_DevInit+0x2d4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <USB_DevInit+0x2d8>)
 800393e:	4313      	orrs	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003950:	b004      	add	sp, #16
 8003952:	4770      	bx	lr
 8003954:	803c3800 	.word	0x803c3800
 8003958:	40000004 	.word	0x40000004

0800395c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <USB_FlushTxFifo+0x48>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d0f0      	beq.n	8003976 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	00030d40 	.word	0x00030d40

080039a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2210      	movs	r2, #16
 80039b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <USB_FlushRxFifo+0x40>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e006      	b.n	80039da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d0f0      	beq.n	80039ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	00030d40 	.word	0x00030d40

080039ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <USB_CoreReset+0x64>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e01b      	b.n	8003ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	daf2      	bge.n	8003a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <USB_CoreReset+0x64>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e006      	b.n	8003ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d0f0      	beq.n	8003a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	00030d40 	.word	0x00030d40

08003ac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ade:	f3ef 8305 	mrs	r3, IPSR
 8003ae2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aea:	f3ef 8310 	mrs	r3, PRIMASK
 8003aee:	607b      	str	r3, [r7, #4]
  return(result);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003af6:	f3ef 8311 	mrs	r3, BASEPRI
 8003afa:	603b      	str	r3, [r7, #0]
  return(result);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <osKernelInitialize+0x3a>
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <osKernelInitialize+0x64>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d103      	bne.n	8003b12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b0a:	f06f 0305 	mvn.w	r3, #5
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e00c      	b.n	8003b2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <osKernelInitialize+0x64>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <osKernelInitialize+0x64>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e002      	b.n	8003b2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000002c 	.word	0x2000002c

08003b40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b46:	f3ef 8305 	mrs	r3, IPSR
 8003b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b52:	f3ef 8310 	mrs	r3, PRIMASK
 8003b56:	607b      	str	r3, [r7, #4]
  return(result);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b62:	603b      	str	r3, [r7, #0]
  return(result);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <osKernelStart+0x3a>
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <osKernelStart+0x68>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b72:	f06f 0305 	mvn.w	r3, #5
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e010      	b.n	8003b9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <osKernelStart+0x68>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d109      	bne.n	8003b96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b82:	f7ff ffa1 	bl	8003ac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <osKernelStart+0x68>)
 8003b88:	2202      	movs	r2, #2
 8003b8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b8c:	f001 f89c 	bl	8004cc8 <vTaskStartScheduler>
      stat = osOK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e002      	b.n	8003b9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000002c 	.word	0x2000002c

08003bac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b090      	sub	sp, #64	; 0x40
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bbc:	f3ef 8305 	mrs	r3, IPSR
 8003bc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f040 808f 	bne.w	8003ce8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bca:	f3ef 8310 	mrs	r3, PRIMASK
 8003bce:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bda:	617b      	str	r3, [r7, #20]
  return(result);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <osThreadNew+0x3e>
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <osThreadNew+0x148>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d07e      	beq.n	8003ce8 <osThreadNew+0x13c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d07b      	beq.n	8003ce8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003bf4:	2318      	movs	r3, #24
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d045      	beq.n	8003c94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <osThreadNew+0x6a>
        name = attr->name;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <osThreadNew+0x90>
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2b38      	cmp	r3, #56	; 0x38
 8003c2e:	d805      	bhi.n	8003c3c <osThreadNew+0x90>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <osThreadNew+0x94>
        return (NULL);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e054      	b.n	8003cea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <osThreadNew+0xca>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b5b      	cmp	r3, #91	; 0x5b
 8003c5e:	d90a      	bls.n	8003c76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <osThreadNew+0xca>
        mem = 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	e010      	b.n	8003c98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <osThreadNew+0xec>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <osThreadNew+0xec>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <osThreadNew+0xec>
          mem = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	e001      	b.n	8003c98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d110      	bne.n	8003cc0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ca6:	9202      	str	r2, [sp, #8]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fe2b 	bl	8004910 <xTaskCreateStatic>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e013      	b.n	8003ce8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d110      	bne.n	8003ce8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	f107 0310 	add.w	r3, r7, #16
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fe79 	bl	80049d0 <xTaskCreate>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d001      	beq.n	8003ce8 <osThreadNew+0x13c>
          hTask = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ce8:	693b      	ldr	r3, [r7, #16]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000002c 	.word	0x2000002c

08003cf8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d00:	f3ef 8305 	mrs	r3, IPSR
 8003d04:	613b      	str	r3, [r7, #16]
  return(result);
 8003d06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d18:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <osDelay+0x3c>
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <osDelay+0x58>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d103      	bne.n	8003d34 <osDelay+0x3c>
    stat = osErrorISR;
 8003d2c:	f06f 0305 	mvn.w	r3, #5
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e007      	b.n	8003d44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 ff8c 	bl	8004c5c <vTaskDelay>
    }
  }

  return (stat);
 8003d44:	697b      	ldr	r3, [r7, #20]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000002c 	.word	0x2000002c

08003d54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <vApplicationGetIdleTaskMemory+0x30>)
 8003d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000030 	.word	0x20000030
 8003d84:	2000008c 	.word	0x2000008c

08003d88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a06      	ldr	r2, [pc, #24]	; (8003db8 <vApplicationGetTimerTaskMemory+0x30>)
 8003d9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	2000028c 	.word	0x2000028c
 8003db8:	200002e8 	.word	0x200002e8

08003dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f103 0208 	add.w	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f103 0208 	add.w	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e00c      	b.n	8003e98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3308      	adds	r3, #8
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e002      	b.n	8003e8c <vListInsert+0x2e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d2f6      	bcs.n	8003e86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6892      	ldr	r2, [r2, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6852      	ldr	r2, [r2, #4]
 8003ef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d103      	bne.n	8003f04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	b672      	cpsid	i
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	b662      	cpsie	i
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	e7fe      	b.n	8003f4e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003f50:	f002 f842 	bl	8005fd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	441a      	add	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	3b01      	subs	r3, #1
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	22ff      	movs	r2, #255	; 0xff
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d114      	bne.n	8003fd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01a      	beq.n	8003fe4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 f916 	bl	80051e4 <xTaskRemoveFromEventList>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d012      	beq.n	8003fe4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <xQueueGenericReset+0xd0>)
 8003fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	e009      	b.n	8003fe4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fef1 	bl	8003dbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3324      	adds	r3, #36	; 0x24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff feec 	bl	8003dbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fe4:	f002 f82a 	bl	800603c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fe8:	2301      	movs	r3, #1
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08e      	sub	sp, #56	; 0x38
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <xQueueGenericCreateStatic+0x2c>
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	b672      	cpsid	i
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	b662      	cpsie	i
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	e7fe      	b.n	8004022 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <xQueueGenericCreateStatic+0x4a>
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	b672      	cpsid	i
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	b662      	cpsie	i
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	e7fe      	b.n	8004040 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <xQueueGenericCreateStatic+0x56>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <xQueueGenericCreateStatic+0x5a>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericCreateStatic+0x5c>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <xQueueGenericCreateStatic+0x78>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	b672      	cpsid	i
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	b662      	cpsie	i
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	e7fe      	b.n	800406e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <xQueueGenericCreateStatic+0x84>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <xQueueGenericCreateStatic+0x88>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <xQueueGenericCreateStatic+0x8a>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <xQueueGenericCreateStatic+0xa6>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	b672      	cpsid	i
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	b662      	cpsie	i
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	e7fe      	b.n	800409c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800409e:	2350      	movs	r3, #80	; 0x50
 80040a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b50      	cmp	r3, #80	; 0x50
 80040a6:	d00b      	beq.n	80040c0 <xQueueGenericCreateStatic+0xc8>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	b672      	cpsid	i
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	b662      	cpsie	i
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e7fe      	b.n	80040be <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f805 	bl	80040f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3730      	adds	r7, #48	; 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004120:	2101      	movs	r1, #1
 8004122:	69b8      	ldr	r0, [r7, #24]
 8004124:	f7ff fefe 	bl	8003f24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <xQueueGenericSend+0x34>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	b672      	cpsid	i
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	b662      	cpsie	i
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
 800416a:	e7fe      	b.n	800416a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0x42>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <xQueueGenericSend+0x46>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSend+0x48>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <xQueueGenericSend+0x64>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	b672      	cpsid	i
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	b662      	cpsie	i
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	e7fe      	b.n	800419a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSend+0x72>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <xQueueGenericSend+0x76>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <xQueueGenericSend+0x78>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <xQueueGenericSend+0x94>
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	b672      	cpsid	i
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	b662      	cpsie	i
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	e7fe      	b.n	80041ca <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041cc:	f001 f9c8 	bl	8005560 <xTaskGetSchedulerState>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <xQueueGenericSend+0xa4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <xQueueGenericSend+0xa8>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <xQueueGenericSend+0xaa>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <xQueueGenericSend+0xc6>
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	b672      	cpsid	i
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	b662      	cpsie	i
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e7fe      	b.n	80041fc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041fe:	f001 feeb 	bl	8005fd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <xQueueGenericSend+0xdc>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d129      	bne.n	8004268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421a:	f000 fa0d 	bl	8004638 <prvCopyDataToQueue>
 800421e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	4618      	mov	r0, r3
 800422e:	f000 ffd9 	bl	80051e4 <xTaskRemoveFromEventList>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004238:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <xQueueGenericSend+0x200>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	e00a      	b.n	8004260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <xQueueGenericSend+0x200>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004260:	f001 feec 	bl	800603c <vPortExitCritical>
				return pdPASS;
 8004264:	2301      	movs	r3, #1
 8004266:	e063      	b.n	8004330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800426e:	f001 fee5 	bl	800603c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004272:	2300      	movs	r3, #0
 8004274:	e05c      	b.n	8004330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f813 	bl	80052ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004286:	2301      	movs	r3, #1
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800428a:	f001 fed7 	bl	800603c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800428e:	f000 fd83 	bl	8004d98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004292:	f001 fea1 	bl	8005fd8 <vPortEnterCritical>
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800429c:	b25b      	sxtb	r3, r3
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d103      	bne.n	80042ac <xQueueGenericSend+0x174>
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d103      	bne.n	80042c2 <xQueueGenericSend+0x18a>
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c2:	f001 febb 	bl	800603c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042c6:	1d3a      	adds	r2, r7, #4
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 f802 	bl	80052d8 <xTaskCheckForTimeOut>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d124      	bne.n	8004324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042dc:	f000 faa4 	bl	8004828 <prvIsQueueFull>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d018      	beq.n	8004318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	3310      	adds	r3, #16
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff26 	bl	8005140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042f6:	f000 fa2f 	bl	8004758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042fa:	f000 fd5b 	bl	8004db4 <xTaskResumeAll>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af7c 	bne.w	80041fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <xQueueGenericSend+0x200>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	e772      	b.n	80041fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 fa1d 	bl	8004758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800431e:	f000 fd49 	bl	8004db4 <xTaskResumeAll>
 8004322:	e76c      	b.n	80041fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004326:	f000 fa17 	bl	8004758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800432a:	f000 fd43 	bl	8004db4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800432e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004330:	4618      	mov	r0, r3
 8004332:	3738      	adds	r7, #56	; 0x38
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	; 0x38
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <xQueueGenericSendFromISR+0x30>
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
 800436a:	e7fe      	b.n	800436a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <xQueueGenericSendFromISR+0x3e>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <xQueueGenericSendFromISR+0x42>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSendFromISR+0x44>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xQueueGenericSendFromISR+0x60>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	b672      	cpsid	i
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	b662      	cpsie	i
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	e7fe      	b.n	800439a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d103      	bne.n	80043aa <xQueueGenericSendFromISR+0x6e>
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <xQueueGenericSendFromISR+0x72>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <xQueueGenericSendFromISR+0x74>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <xQueueGenericSendFromISR+0x90>
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	b672      	cpsid	i
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	b662      	cpsie	i
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e7fe      	b.n	80043ca <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043cc:	f001 fee4 	bl	8006198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043d0:	f3ef 8211 	mrs	r2, BASEPRI
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	61ba      	str	r2, [r7, #24]
 80043ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <xQueueGenericSendFromISR+0xc6>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d12c      	bne.n	800445c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004412:	f000 f911 	bl	8004638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004416:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d112      	bne.n	8004446 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	3324      	adds	r3, #36	; 0x24
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fed9 	bl	80051e4 <xTaskRemoveFromEventList>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e007      	b.n	8004456 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800444a:	3301      	adds	r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	b25a      	sxtb	r2, r3
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800445a:	e001      	b.n	8004460 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800446c:	4618      	mov	r0, r3
 800446e:	3738      	adds	r7, #56	; 0x38
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	; 0x30
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004480:	2300      	movs	r3, #0
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <xQueueReceive+0x32>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	b672      	cpsid	i
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	b662      	cpsie	i
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	e7fe      	b.n	80044a4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <xQueueReceive+0x40>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <xQueueReceive+0x44>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <xQueueReceive+0x46>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <xQueueReceive+0x62>
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	b672      	cpsid	i
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	b662      	cpsie	i
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e7fe      	b.n	80044d4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d6:	f001 f843 	bl	8005560 <xTaskGetSchedulerState>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xQueueReceive+0x72>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueReceive+0x76>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <xQueueReceive+0x78>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <xQueueReceive+0x94>
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	b672      	cpsid	i
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	b662      	cpsie	i
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e7fe      	b.n	8004506 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004508:	f001 fd66 	bl	8005fd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01f      	beq.n	8004558 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451c:	f000 f8f6 	bl	800470c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1e5a      	subs	r2, r3, #1
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00f      	beq.n	8004550 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	3310      	adds	r3, #16
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fe55 	bl	80051e4 <xTaskRemoveFromEventList>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004540:	4b3c      	ldr	r3, [pc, #240]	; (8004634 <xQueueReceive+0x1c0>)
 8004542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004550:	f001 fd74 	bl	800603c <vPortExitCritical>
				return pdPASS;
 8004554:	2301      	movs	r3, #1
 8004556:	e069      	b.n	800462c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800455e:	f001 fd6d 	bl	800603c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004562:	2300      	movs	r3, #0
 8004564:	e062      	b.n	800462c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe9b 	bl	80052ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800457a:	f001 fd5f 	bl	800603c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800457e:	f000 fc0b 	bl	8004d98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004582:	f001 fd29 	bl	8005fd8 <vPortEnterCritical>
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458c:	b25b      	sxtb	r3, r3
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d103      	bne.n	800459c <xQueueReceive+0x128>
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d103      	bne.n	80045b2 <xQueueReceive+0x13e>
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b2:	f001 fd43 	bl	800603c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045b6:	1d3a      	adds	r2, r7, #4
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fe8a 	bl	80052d8 <xTaskCheckForTimeOut>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d123      	bne.n	8004612 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045cc:	f000 f916 	bl	80047fc <prvIsQueueEmpty>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fdae 	bl	8005140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e6:	f000 f8b7 	bl	8004758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ea:	f000 fbe3 	bl	8004db4 <xTaskResumeAll>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d189      	bne.n	8004508 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <xQueueReceive+0x1c0>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	e780      	b.n	8004508 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004608:	f000 f8a6 	bl	8004758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800460c:	f000 fbd2 	bl	8004db4 <xTaskResumeAll>
 8004610:	e77a      	b.n	8004508 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004614:	f000 f8a0 	bl	8004758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004618:	f000 fbcc 	bl	8004db4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800461c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461e:	f000 f8ed 	bl	80047fc <prvIsQueueEmpty>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f43f af6f 	beq.w	8004508 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800462a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800462c:	4618      	mov	r0, r3
 800462e:	3730      	adds	r7, #48	; 0x30
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d14d      	bne.n	80046fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 ff9a 	bl	800559c <xTaskPriorityDisinherit>
 8004668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e043      	b.n	80046fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6858      	ldr	r0, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	461a      	mov	r2, r3
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	f001 ffce 	bl	8006624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d32b      	bcc.n	80046fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e026      	b.n	80046fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68d8      	ldr	r0, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	461a      	mov	r2, r3
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	f001 ffb4 	bl	8006624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	425b      	negs	r3, r3
 80046c6:	441a      	add	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d207      	bcs.n	80046e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	425b      	negs	r3, r3
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d105      	bne.n	80046fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d018      	beq.n	8004750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	441a      	add	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d303      	bcc.n	8004740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68d9      	ldr	r1, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	461a      	mov	r2, r3
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f001 ff6a 	bl	8006624 <memcpy>
	}
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004760:	f001 fc3a 	bl	8005fd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800476c:	e011      	b.n	8004792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fd32 	bl	80051e4 <xTaskRemoveFromEventList>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004786:	f000 fe0b 	bl	80053a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3b01      	subs	r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	dce9      	bgt.n	800476e <prvUnlockQueue+0x16>
 800479a:	e000      	b.n	800479e <prvUnlockQueue+0x46>
					break;
 800479c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047a6:	f001 fc49 	bl	800603c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047aa:	f001 fc15 	bl	8005fd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b6:	e011      	b.n	80047dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3310      	adds	r3, #16
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd0d 	bl	80051e4 <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047d0:	f000 fde6 	bl	80053a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d4:	7bbb      	ldrb	r3, [r7, #14]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dce9      	bgt.n	80047b8 <prvUnlockQueue+0x60>
 80047e4:	e000      	b.n	80047e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	22ff      	movs	r2, #255	; 0xff
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047f0:	f001 fc24 	bl	800603c <vPortExitCritical>
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004804:	f001 fbe8 	bl	8005fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e001      	b.n	800481a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f001 fc0f 	bl	800603c <vPortExitCritical>

	return xReturn;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004830:	f001 fbd2 	bl	8005fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	429a      	cmp	r2, r3
 800483e:	d102      	bne.n	8004846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e001      	b.n	800484a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484a:	f001 fbf7 	bl	800603c <vPortExitCritical>

	return xReturn;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e014      	b.n	8004892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004868:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <vQueueAddToRegistry+0x4c>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004874:	490b      	ldr	r1, [pc, #44]	; (80048a4 <vQueueAddToRegistry+0x4c>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <vQueueAddToRegistry+0x4c>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800488a:	e005      	b.n	8004898 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b07      	cmp	r3, #7
 8004896:	d9e7      	bls.n	8004868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20004e10 	.word	0x20004e10

080048a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048b8:	f001 fb8e 	bl	8005fd8 <vPortEnterCritical>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d103      	bne.n	80048d2 <vQueueWaitForMessageRestricted+0x2a>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d103      	bne.n	80048e8 <vQueueWaitForMessageRestricted+0x40>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e8:	f001 fba8 	bl	800603c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fc45 	bl	800518c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff28 	bl	8004758 <prvUnlockQueue>
	}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af04      	add	r7, sp, #16
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xTaskCreateStatic+0x2c>
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	b672      	cpsid	i
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	b662      	cpsie	i
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e7fe      	b.n	800493a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <xTaskCreateStatic+0x4a>
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	b672      	cpsid	i
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	b662      	cpsie	i
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	e7fe      	b.n	8004958 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800495a:	235c      	movs	r3, #92	; 0x5c
 800495c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b5c      	cmp	r3, #92	; 0x5c
 8004962:	d00b      	beq.n	800497c <xTaskCreateStatic+0x6c>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	b672      	cpsid	i
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	b662      	cpsie	i
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e7fe      	b.n	800497a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800497c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01e      	beq.n	80049c2 <xTaskCreateStatic+0xb2>
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004992:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800499c:	2300      	movs	r3, #0
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f850 	bl	8004a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049bc:	f000 f8de 	bl	8004b7c <prvAddNewTaskToReadyList>
 80049c0:	e001      	b.n	80049c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049c6:	697b      	ldr	r3, [r7, #20]
	}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af04      	add	r7, sp, #16
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fc19 	bl	800621c <pvPortMalloc>
 80049ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049f2:	205c      	movs	r0, #92	; 0x5c
 80049f4:	f001 fc12 	bl	800621c <pvPortMalloc>
 80049f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
 8004a06:	e005      	b.n	8004a14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f001 fccf 	bl	80063ac <vPortFree>
 8004a0e:	e001      	b.n	8004a14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d017      	beq.n	8004a4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	2300      	movs	r3, #0
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	9302      	str	r3, [sp, #8]
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f80e 	bl	8004a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a3e:	69f8      	ldr	r0, [r7, #28]
 8004a40:	f000 f89c 	bl	8004b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a44:	2301      	movs	r3, #1
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e002      	b.n	8004a50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a50:	69bb      	ldr	r3, [r7, #24]
	}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b088      	sub	sp, #32
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	461a      	mov	r2, r3
 8004a72:	21a5      	movs	r1, #165	; 0xa5
 8004a74:	f001 fde1 	bl	800663a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004a82:	440b      	add	r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <prvInitialiseNewTask+0x5a>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	b672      	cpsid	i
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	b662      	cpsie	i
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e7fe      	b.n	8004ab2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01f      	beq.n	8004afa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e012      	b.n	8004ae6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7819      	ldrb	r1, [r3, #0]
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	3334      	adds	r3, #52	; 0x34
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b0f      	cmp	r3, #15
 8004aea:	d9e9      	bls.n	8004ac0 <prvInitialiseNewTask+0x66>
 8004aec:	e000      	b.n	8004af0 <prvInitialiseNewTask+0x96>
			{
				break;
 8004aee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af8:	e003      	b.n	8004b02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b37      	cmp	r3, #55	; 0x37
 8004b06:	d901      	bls.n	8004b0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b08:	2337      	movs	r3, #55	; 0x37
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f96a 	bl	8003dfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f965 	bl	8003dfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	68f9      	ldr	r1, [r7, #12]
 8004b5a:	69b8      	ldr	r0, [r7, #24]
 8004b5c:	f001 f936 	bl	8005dcc <pxPortInitialiseStack>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b72:	bf00      	nop
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b84:	f001 fa28 	bl	8005fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b88:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <prvAddNewTaskToReadyList+0xc4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	; (8004c40 <prvAddNewTaskToReadyList+0xc4>)
 8004b90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <prvAddNewTaskToReadyList+0xc4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d110      	bne.n	8004bca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ba8:	f000 fc1e 	bl	80053e8 <prvInitialiseTaskLists>
 8004bac:	e00d      	b.n	8004bca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <prvAddNewTaskToReadyList+0xcc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d802      	bhi.n	8004bca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <prvAddNewTaskToReadyList+0xd0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <prvAddNewTaskToReadyList+0xd0>)
 8004bd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <prvAddNewTaskToReadyList+0xd4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d903      	bls.n	8004bf0 <prvAddNewTaskToReadyList+0x74>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <prvAddNewTaskToReadyList+0xd4>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <prvAddNewTaskToReadyList+0xd8>)
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f7ff f905 	bl	8003e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c0c:	f001 fa16 	bl	800603c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c10:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <prvAddNewTaskToReadyList+0xcc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00e      	beq.n	8004c36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d207      	bcs.n	8004c36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <prvAddNewTaskToReadyList+0xdc>)
 8004c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000bbc 	.word	0x20000bbc
 8004c44:	200006e8 	.word	0x200006e8
 8004c48:	20000bc8 	.word	0x20000bc8
 8004c4c:	20000bd8 	.word	0x20000bd8
 8004c50:	20000bc4 	.word	0x20000bc4
 8004c54:	200006ec 	.word	0x200006ec
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <vTaskDelay+0x64>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <vTaskDelay+0x32>
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	b672      	cpsid	i
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	b662      	cpsie	i
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	e7fe      	b.n	8004c8c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004c8e:	f000 f883 	bl	8004d98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c92:	2100      	movs	r1, #0
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fcf1 	bl	800567c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9a:	f000 f88b 	bl	8004db4 <xTaskResumeAll>
 8004c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <vTaskDelay+0x68>)
 8004ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000be4 	.word	0x20000be4
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	1d39      	adds	r1, r7, #4
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f838 	bl	8003d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	9202      	str	r2, [sp, #8]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	4922      	ldr	r1, [pc, #136]	; (8004d80 <vTaskStartScheduler+0xb8>)
 8004cf8:	4822      	ldr	r0, [pc, #136]	; (8004d84 <vTaskStartScheduler+0xbc>)
 8004cfa:	f7ff fe09 	bl	8004910 <xTaskCreateStatic>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <vTaskStartScheduler+0xc0>)
 8004d02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <vTaskStartScheduler+0xc0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e001      	b.n	8004d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d1c:	f000 fd02 	bl	8005724 <xTimerCreateTimerTask>
 8004d20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d117      	bne.n	8004d58 <vTaskStartScheduler+0x90>
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	b672      	cpsid	i
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	b662      	cpsie	i
 8004d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d3e:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <vTaskStartScheduler+0xc4>)
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <vTaskStartScheduler+0xc8>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <vTaskStartScheduler+0xcc>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d52:	f001 f8c5 	bl	8005ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d56:	e00f      	b.n	8004d78 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d10b      	bne.n	8004d78 <vTaskStartScheduler+0xb0>
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	b672      	cpsid	i
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	b662      	cpsie	i
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e7fe      	b.n	8004d76 <vTaskStartScheduler+0xae>
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	08006680 	.word	0x08006680
 8004d84:	080053b9 	.word	0x080053b9
 8004d88:	20000be0 	.word	0x20000be0
 8004d8c:	20000bdc 	.word	0x20000bdc
 8004d90:	20000bc8 	.word	0x20000bc8
 8004d94:	20000bc0 	.word	0x20000bc0

08004d98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vTaskSuspendAll+0x18>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a03      	ldr	r2, [pc, #12]	; (8004db0 <vTaskSuspendAll+0x18>)
 8004da4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000be4 	.word	0x20000be4

08004db4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dc2:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <xTaskResumeAll+0x118>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <xTaskResumeAll+0x2e>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	b672      	cpsid	i
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	b662      	cpsie	i
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	e7fe      	b.n	8004de0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de2:	f001 f8f9 	bl	8005fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <xTaskResumeAll+0x118>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a37      	ldr	r2, [pc, #220]	; (8004ecc <xTaskResumeAll+0x118>)
 8004dee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df0:	4b36      	ldr	r3, [pc, #216]	; (8004ecc <xTaskResumeAll+0x118>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d162      	bne.n	8004ebe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <xTaskResumeAll+0x11c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05e      	beq.n	8004ebe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e00:	e02f      	b.n	8004e62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <xTaskResumeAll+0x120>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff f85e 	bl	8003ed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff f859 	bl	8003ed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <xTaskResumeAll+0x124>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d903      	bls.n	8004e32 <xTaskResumeAll+0x7e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <xTaskResumeAll+0x124>)
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a27      	ldr	r2, [pc, #156]	; (8004edc <xTaskResumeAll+0x128>)
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fe ffe4 	bl	8003e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <xTaskResumeAll+0x12c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d302      	bcc.n	8004e62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <xTaskResumeAll+0x130>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <xTaskResumeAll+0x120>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1cb      	bne.n	8004e02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e70:	f000 fb56 	bl	8005520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e74:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <xTaskResumeAll+0x134>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e80:	f000 f846 	bl	8004f10 <xTaskIncrementTick>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <xTaskResumeAll+0x130>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f1      	bne.n	8004e80 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <xTaskResumeAll+0x134>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <xTaskResumeAll+0x130>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eae:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <xTaskResumeAll+0x138>)
 8004eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ebe:	f001 f8bd 	bl	800603c <vPortExitCritical>

	return xAlreadyYielded;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000be4 	.word	0x20000be4
 8004ed0:	20000bbc 	.word	0x20000bbc
 8004ed4:	20000b7c 	.word	0x20000b7c
 8004ed8:	20000bc4 	.word	0x20000bc4
 8004edc:	200006ec 	.word	0x200006ec
 8004ee0:	200006e8 	.word	0x200006e8
 8004ee4:	20000bd0 	.word	0x20000bd0
 8004ee8:	20000bcc 	.word	0x20000bcc
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <xTaskGetTickCount+0x1c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004efc:	687b      	ldr	r3, [r7, #4]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000bc0 	.word	0x20000bc0

08004f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1a:	4b4f      	ldr	r3, [pc, #316]	; (8005058 <xTaskIncrementTick+0x148>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 808a 	bne.w	8005038 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f24:	4b4d      	ldr	r3, [pc, #308]	; (800505c <xTaskIncrementTick+0x14c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f2c:	4a4b      	ldr	r2, [pc, #300]	; (800505c <xTaskIncrementTick+0x14c>)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d121      	bne.n	8004f7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <xTaskIncrementTick+0x150>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <xTaskIncrementTick+0x4a>
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	b672      	cpsid	i
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	b662      	cpsie	i
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7fe      	b.n	8004f58 <xTaskIncrementTick+0x48>
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <xTaskIncrementTick+0x150>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	4b40      	ldr	r3, [pc, #256]	; (8005064 <xTaskIncrementTick+0x154>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <xTaskIncrementTick+0x150>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4a3e      	ldr	r2, [pc, #248]	; (8005064 <xTaskIncrementTick+0x154>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <xTaskIncrementTick+0x158>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a3c      	ldr	r2, [pc, #240]	; (8005068 <xTaskIncrementTick+0x158>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f000 fad2 	bl	8005520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	; (800506c <xTaskIncrementTick+0x15c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d349      	bcc.n	800501a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <xTaskIncrementTick+0x150>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <xTaskIncrementTick+0x15c>)
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	601a      	str	r2, [r3, #0]
					break;
 8004f98:	e03f      	b.n	800501a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9a:	4b31      	ldr	r3, [pc, #196]	; (8005060 <xTaskIncrementTick+0x150>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fb2:	4a2e      	ldr	r2, [pc, #184]	; (800506c <xTaskIncrementTick+0x15c>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fb8:	e02f      	b.n	800501a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe ff86 	bl	8003ed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	3318      	adds	r3, #24
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe ff7d 	bl	8003ed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	4b25      	ldr	r3, [pc, #148]	; (8005070 <xTaskIncrementTick+0x160>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d903      	bls.n	8004fea <xTaskIncrementTick+0xda>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <xTaskIncrementTick+0x160>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <xTaskIncrementTick+0x164>)
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fe ff08 	bl	8003e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <xTaskIncrementTick+0x168>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	429a      	cmp	r2, r3
 8005012:	d3b8      	bcc.n	8004f86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005018:	e7b5      	b.n	8004f86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <xTaskIncrementTick+0x168>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4914      	ldr	r1, [pc, #80]	; (8005074 <xTaskIncrementTick+0x164>)
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d907      	bls.n	8005042 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005032:	2301      	movs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e004      	b.n	8005042 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <xTaskIncrementTick+0x16c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3301      	adds	r3, #1
 800503e:	4a0f      	ldr	r2, [pc, #60]	; (800507c <xTaskIncrementTick+0x16c>)
 8005040:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <xTaskIncrementTick+0x170>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800504a:	2301      	movs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000be4 	.word	0x20000be4
 800505c:	20000bc0 	.word	0x20000bc0
 8005060:	20000b74 	.word	0x20000b74
 8005064:	20000b78 	.word	0x20000b78
 8005068:	20000bd4 	.word	0x20000bd4
 800506c:	20000bdc 	.word	0x20000bdc
 8005070:	20000bc4 	.word	0x20000bc4
 8005074:	200006ec 	.word	0x200006ec
 8005078:	200006e8 	.word	0x200006e8
 800507c:	20000bcc 	.word	0x20000bcc
 8005080:	20000bd0 	.word	0x20000bd0

08005084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800508a:	4b28      	ldr	r3, [pc, #160]	; (800512c <vTaskSwitchContext+0xa8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <vTaskSwitchContext+0xac>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005098:	e042      	b.n	8005120 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800509a:	4b25      	ldr	r3, [pc, #148]	; (8005130 <vTaskSwitchContext+0xac>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <vTaskSwitchContext+0xb0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e011      	b.n	80050cc <vTaskSwitchContext+0x48>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <vTaskSwitchContext+0x42>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	b672      	cpsid	i
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	b662      	cpsie	i
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	e7fe      	b.n	80050c4 <vTaskSwitchContext+0x40>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	491a      	ldr	r1, [pc, #104]	; (8005138 <vTaskSwitchContext+0xb4>)
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0e3      	beq.n	80050a8 <vTaskSwitchContext+0x24>
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <vTaskSwitchContext+0xb4>)
 80050ec:	4413      	add	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3308      	adds	r3, #8
 8005102:	429a      	cmp	r2, r3
 8005104:	d104      	bne.n	8005110 <vTaskSwitchContext+0x8c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <vTaskSwitchContext+0xb8>)
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4a06      	ldr	r2, [pc, #24]	; (8005134 <vTaskSwitchContext+0xb0>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6013      	str	r3, [r2, #0]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000be4 	.word	0x20000be4
 8005130:	20000bd0 	.word	0x20000bd0
 8005134:	20000bc4 	.word	0x20000bc4
 8005138:	200006ec 	.word	0x200006ec
 800513c:	200006e8 	.word	0x200006e8

08005140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <vTaskPlaceOnEventList+0x28>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e7fe      	b.n	8005166 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <vTaskPlaceOnEventList+0x48>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3318      	adds	r3, #24
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fe fe74 	bl	8003e5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005176:	2101      	movs	r1, #1
 8005178:	6838      	ldr	r0, [r7, #0]
 800517a:	f000 fa7f 	bl	800567c <prvAddCurrentTaskToDelayedList>
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	200006e8 	.word	0x200006e8

0800518c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <vTaskPlaceOnEventListRestricted+0x2a>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	b672      	cpsid	i
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	b662      	cpsie	i
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e7fe      	b.n	80051b4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4619      	mov	r1, r3
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7fe fe29 	bl	8003e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	68b8      	ldr	r0, [r7, #8]
 80051d4:	f000 fa52 	bl	800567c <prvAddCurrentTaskToDelayedList>
	}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200006e8 	.word	0x200006e8

080051e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <xTaskRemoveFromEventList+0x2e>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	b672      	cpsid	i
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	b662      	cpsie	i
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e7fe      	b.n	8005210 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3318      	adds	r3, #24
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fe5a 	bl	8003ed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <xTaskRemoveFromEventList+0xb0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11d      	bne.n	8005260 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fe51 	bl	8003ed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <xTaskRemoveFromEventList+0xb4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <xTaskRemoveFromEventList+0x5e>
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <xTaskRemoveFromEventList+0xb4>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <xTaskRemoveFromEventList+0xb8>)
 8005250:	441a      	add	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe fddc 	bl	8003e16 <vListInsertEnd>
 800525e:	e005      	b.n	800526c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3318      	adds	r3, #24
 8005264:	4619      	mov	r1, r3
 8005266:	480e      	ldr	r0, [pc, #56]	; (80052a0 <xTaskRemoveFromEventList+0xbc>)
 8005268:	f7fe fdd5 	bl	8003e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <xTaskRemoveFromEventList+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	429a      	cmp	r2, r3
 8005278:	d905      	bls.n	8005286 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800527a:	2301      	movs	r3, #1
 800527c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <xTaskRemoveFromEventList+0xc4>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e001      	b.n	800528a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000be4 	.word	0x20000be4
 8005298:	20000bc4 	.word	0x20000bc4
 800529c:	200006ec 	.word	0x200006ec
 80052a0:	20000b7c 	.word	0x20000b7c
 80052a4:	200006e8 	.word	0x200006e8
 80052a8:	20000bd0 	.word	0x20000bd0

080052ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <vTaskInternalSetTimeOutState+0x24>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <vTaskInternalSetTimeOutState+0x28>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	605a      	str	r2, [r3, #4]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000bd4 	.word	0x20000bd4
 80052d4:	20000bc0 	.word	0x20000bc0

080052d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <xTaskCheckForTimeOut+0x28>
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	b672      	cpsid	i
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	b662      	cpsie	i
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e7fe      	b.n	80052fe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <xTaskCheckForTimeOut+0x46>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	b672      	cpsid	i
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	b662      	cpsie	i
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e7fe      	b.n	800531c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800531e:	f000 fe5b 	bl	8005fd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <xTaskCheckForTimeOut+0xc0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d102      	bne.n	8005342 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e023      	b.n	800538a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <xTaskCheckForTimeOut+0xc4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d007      	beq.n	800535e <xTaskCheckForTimeOut+0x86>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e015      	b.n	800538a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	429a      	cmp	r2, r3
 8005366:	d20b      	bcs.n	8005380 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ff99 	bl	80052ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e004      	b.n	800538a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005386:	2301      	movs	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800538a:	f000 fe57 	bl	800603c <vPortExitCritical>

	return xReturn;
 800538e:	69fb      	ldr	r3, [r7, #28]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000bc0 	.word	0x20000bc0
 800539c:	20000bd4 	.word	0x20000bd4

080053a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <vTaskMissedYield+0x14>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20000bd0 	.word	0x20000bd0

080053b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053c0:	f000 f852 	bl	8005468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <prvIdleTask+0x28>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d9f9      	bls.n	80053c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <prvIdleTask+0x2c>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053dc:	e7f0      	b.n	80053c0 <prvIdleTask+0x8>
 80053de:	bf00      	nop
 80053e0:	200006ec 	.word	0x200006ec
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	e00c      	b.n	800540e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <prvInitialiseTaskLists+0x60>)
 8005400:	4413      	add	r3, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fcda 	bl	8003dbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b37      	cmp	r3, #55	; 0x37
 8005412:	d9ef      	bls.n	80053f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005414:	480d      	ldr	r0, [pc, #52]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005416:	f7fe fcd1 	bl	8003dbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800541a:	480d      	ldr	r0, [pc, #52]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800541c:	f7fe fcce 	bl	8003dbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005420:	480c      	ldr	r0, [pc, #48]	; (8005454 <prvInitialiseTaskLists+0x6c>)
 8005422:	f7fe fccb 	bl	8003dbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005426:	480c      	ldr	r0, [pc, #48]	; (8005458 <prvInitialiseTaskLists+0x70>)
 8005428:	f7fe fcc8 	bl	8003dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800542c:	480b      	ldr	r0, [pc, #44]	; (800545c <prvInitialiseTaskLists+0x74>)
 800542e:	f7fe fcc5 	bl	8003dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvInitialiseTaskLists+0x78>)
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <prvInitialiseTaskLists+0x7c>)
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200006ec 	.word	0x200006ec
 800544c:	20000b4c 	.word	0x20000b4c
 8005450:	20000b60 	.word	0x20000b60
 8005454:	20000b7c 	.word	0x20000b7c
 8005458:	20000b90 	.word	0x20000b90
 800545c:	20000ba8 	.word	0x20000ba8
 8005460:	20000b74 	.word	0x20000b74
 8005464:	20000b78 	.word	0x20000b78

08005468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800546e:	e019      	b.n	80054a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005470:	f000 fdb2 	bl	8005fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <prvCheckTasksWaitingTermination+0x4c>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fd25 	bl	8003ed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <prvCheckTasksWaitingTermination+0x50>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <prvCheckTasksWaitingTermination+0x50>)
 800548e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 8005498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800549a:	f000 fdcf 	bl	800603c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f80e 	bl	80054c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e1      	bne.n	8005470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000b90 	.word	0x20000b90
 80054b8:	20000bbc 	.word	0x20000bbc
 80054bc:	20000ba4 	.word	0x20000ba4

080054c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 ff68 	bl	80063ac <vPortFree>
				vPortFree( pxTCB );
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 ff65 	bl	80063ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054e2:	e019      	b.n	8005518 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d103      	bne.n	80054f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 ff5c 	bl	80063ac <vPortFree>
	}
 80054f4:	e010      	b.n	8005518 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d00b      	beq.n	8005518 <prvDeleteTCB+0x58>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	b672      	cpsid	i
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	b662      	cpsie	i
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e7fe      	b.n	8005516 <prvDeleteTCB+0x56>
	}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvResetNextTaskUnblockTime+0x38>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <prvResetNextTaskUnblockTime+0x3c>)
 8005532:	f04f 32ff 	mov.w	r2, #4294967295
 8005536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005538:	e008      	b.n	800554c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <prvResetNextTaskUnblockTime+0x38>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <prvResetNextTaskUnblockTime+0x3c>)
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000b74 	.word	0x20000b74
 800555c:	20000bdc 	.word	0x20000bdc

08005560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <xTaskGetSchedulerState+0x34>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d102      	bne.n	8005574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800556e:	2301      	movs	r3, #1
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	e008      	b.n	8005586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <xTaskGetSchedulerState+0x38>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800557c:	2302      	movs	r3, #2
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	e001      	b.n	8005586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005586:	687b      	ldr	r3, [r7, #4]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000bc8 	.word	0x20000bc8
 8005598:	20000be4 	.word	0x20000be4

0800559c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d058      	beq.n	8005664 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <xTaskPriorityDisinherit+0xd4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d00b      	beq.n	80055d4 <xTaskPriorityDisinherit+0x38>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	b672      	cpsid	i
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	b662      	cpsie	i
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e7fe      	b.n	80055d2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xTaskPriorityDisinherit+0x58>
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	e7fe      	b.n	80055f2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	1e5a      	subs	r2, r3, #1
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	429a      	cmp	r2, r3
 8005608:	d02c      	beq.n	8005664 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d128      	bne.n	8005664 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3304      	adds	r3, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fc5a 	bl	8003ed0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <xTaskPriorityDisinherit+0xd8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <xTaskPriorityDisinherit+0xa8>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a0c      	ldr	r2, [pc, #48]	; (8005674 <xTaskPriorityDisinherit+0xd8>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a09      	ldr	r2, [pc, #36]	; (8005678 <xTaskPriorityDisinherit+0xdc>)
 8005652:	441a      	add	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fe fbdb 	bl	8003e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005664:	697b      	ldr	r3, [r7, #20]
	}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200006e8 	.word	0x200006e8
 8005674:	20000bc4 	.word	0x20000bc4
 8005678:	200006ec 	.word	0x200006ec

0800567c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <prvAddCurrentTaskToDelayedList+0x90>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800568c:	4b20      	ldr	r3, [pc, #128]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fc1c 	bl	8003ed0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d10a      	bne.n	80056b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4819      	ldr	r0, [pc, #100]	; (8005714 <prvAddCurrentTaskToDelayedList+0x98>)
 80056b0:	f7fe fbb1 	bl	8003e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056b4:	e026      	b.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d209      	bcs.n	80056e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f7fe fbbf 	bl	8003e5e <vListInsert>
}
 80056e0:	e010      	b.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <prvAddCurrentTaskToDelayedList+0xa0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe fbb5 	bl	8003e5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d202      	bcs.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056fe:	4a08      	ldr	r2, [pc, #32]	; (8005720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6013      	str	r3, [r2, #0]
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000bc0 	.word	0x20000bc0
 8005710:	200006e8 	.word	0x200006e8
 8005714:	20000ba8 	.word	0x20000ba8
 8005718:	20000b78 	.word	0x20000b78
 800571c:	20000b74 	.word	0x20000b74
 8005720:	20000bdc 	.word	0x20000bdc

08005724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800572e:	f000 fb0d 	bl	8005d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <xTimerCreateTimerTask+0x84>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d021      	beq.n	800577e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005742:	1d3a      	adds	r2, r7, #4
 8005744:	f107 0108 	add.w	r1, r7, #8
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fb1b 	bl	8003d88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	9202      	str	r2, [sp, #8]
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	2302      	movs	r3, #2
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	460a      	mov	r2, r1
 8005764:	4911      	ldr	r1, [pc, #68]	; (80057ac <xTimerCreateTimerTask+0x88>)
 8005766:	4812      	ldr	r0, [pc, #72]	; (80057b0 <xTimerCreateTimerTask+0x8c>)
 8005768:	f7ff f8d2 	bl	8004910 <xTaskCreateStatic>
 800576c:	4602      	mov	r2, r0
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <xTimerCreateTimerTask+0x90>)
 8005770:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005772:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <xTimerCreateTimerTask+0x90>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <xTimerCreateTimerTask+0x78>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	b672      	cpsid	i
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	b662      	cpsie	i
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e7fe      	b.n	800579a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000c18 	.word	0x20000c18
 80057ac:	08006688 	.word	0x08006688
 80057b0:	080058f1 	.word	0x080058f1
 80057b4:	20000c1c 	.word	0x20000c1c

080057b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <xTimerGenericCommand+0x30>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	e7fe      	b.n	80057e6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057e8:	4b19      	ldr	r3, [pc, #100]	; (8005850 <xTimerGenericCommand+0x98>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02a      	beq.n	8005846 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	dc18      	bgt.n	8005834 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005802:	f7ff fead 	bl	8005560 <xTaskGetSchedulerState>
 8005806:	4603      	mov	r3, r0
 8005808:	2b02      	cmp	r3, #2
 800580a:	d109      	bne.n	8005820 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800580c:	4b10      	ldr	r3, [pc, #64]	; (8005850 <xTimerGenericCommand+0x98>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f107 0110 	add.w	r1, r7, #16
 8005814:	2300      	movs	r3, #0
 8005816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005818:	f7fe fc8e 	bl	8004138 <xQueueGenericSend>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24
 800581e:	e012      	b.n	8005846 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <xTimerGenericCommand+0x98>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	f107 0110 	add.w	r1, r7, #16
 8005828:	2300      	movs	r3, #0
 800582a:	2200      	movs	r2, #0
 800582c:	f7fe fc84 	bl	8004138 <xQueueGenericSend>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24
 8005832:	e008      	b.n	8005846 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <xTimerGenericCommand+0x98>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	f107 0110 	add.w	r1, r7, #16
 800583c:	2300      	movs	r3, #0
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	f7fe fd7c 	bl	800433c <xQueueGenericSendFromISR>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005848:	4618      	mov	r0, r3
 800584a:	3728      	adds	r7, #40	; 0x28
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000c18 	.word	0x20000c18

08005854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585e:	4b23      	ldr	r3, [pc, #140]	; (80058ec <prvProcessExpiredTimer+0x98>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3304      	adds	r3, #4
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fb2f 	bl	8003ed0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	18d1      	adds	r1, r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	6978      	ldr	r0, [r7, #20]
 800588e:	f000 f8d3 	bl	8005a38 <prvInsertTimerInActiveList>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005898:	2300      	movs	r3, #0
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	2100      	movs	r1, #0
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f7ff ff88 	bl	80057b8 <xTimerGenericCommand>
 80058a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d114      	bne.n	80058da <prvProcessExpiredTimer+0x86>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	b672      	cpsid	i
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	b662      	cpsie	i
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e7fe      	b.n	80058c6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	4798      	blx	r3
}
 80058e2:	bf00      	nop
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000c10 	.word	0x20000c10

080058f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f857 	bl	80059b0 <prvGetNextExpireTime>
 8005902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f803 	bl	8005914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800590e:	f000 f8d5 	bl	8005abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005912:	e7f1      	b.n	80058f8 <prvTimerTask+0x8>

08005914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800591e:	f7ff fa3b 	bl	8004d98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f866 	bl	80059f8 <prvSampleTimeNow>
 800592c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d130      	bne.n	8005996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <prvProcessTimerOrBlockTask+0x3c>
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d806      	bhi.n	8005950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005942:	f7ff fa37 	bl	8004db4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff83 	bl	8005854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800594e:	e024      	b.n	800599a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <prvProcessTimerOrBlockTask+0x90>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <prvProcessTimerOrBlockTask+0x50>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <prvProcessTimerOrBlockTask+0x52>
 8005964:	2300      	movs	r3, #0
 8005966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <prvProcessTimerOrBlockTask+0x94>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4619      	mov	r1, r3
 8005976:	f7fe ff97 	bl	80048a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800597a:	f7ff fa1b 	bl	8004db4 <xTaskResumeAll>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <prvProcessTimerOrBlockTask+0x98>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
}
 8005994:	e001      	b.n	800599a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005996:	f7ff fa0d 	bl	8004db4 <xTaskResumeAll>
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000c14 	.word	0x20000c14
 80059a8:	20000c18 	.word	0x20000c18
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059b8:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <prvGetNextExpireTime+0x44>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <prvGetNextExpireTime+0x16>
 80059c2:	2201      	movs	r2, #1
 80059c4:	e000      	b.n	80059c8 <prvGetNextExpireTime+0x18>
 80059c6:	2200      	movs	r2, #0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <prvGetNextExpireTime+0x44>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e001      	b.n	80059e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000c10 	.word	0x20000c10

080059f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a00:	f7ff fa76 	bl	8004ef0 <xTaskGetTickCount>
 8005a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <prvSampleTimeNow+0x3c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d205      	bcs.n	8005a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a10:	f000 f936 	bl	8005c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e002      	b.n	8005a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a22:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <prvSampleTimeNow+0x3c>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a28:	68fb      	ldr	r3, [r7, #12]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000c20 	.word	0x20000c20

08005a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d812      	bhi.n	8005a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad2      	subs	r2, r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d302      	bcc.n	8005a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e01b      	b.n	8005aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <prvInsertTimerInActiveList+0x7c>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7fe f9ee 	bl	8003e5e <vListInsert>
 8005a82:	e012      	b.n	8005aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d206      	bcs.n	8005a9a <prvInsertTimerInActiveList+0x62>
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e007      	b.n	8005aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <prvInsertTimerInActiveList+0x80>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe f9da 	bl	8003e5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005aaa:	697b      	ldr	r3, [r7, #20]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000c14 	.word	0x20000c14
 8005ab8:	20000c10 	.word	0x20000c10

08005abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ac2:	e0cc      	b.n	8005c5e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da19      	bge.n	8005afe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	3304      	adds	r3, #4
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <prvProcessReceivedCommands+0x32>
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	b672      	cpsid	i
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	b662      	cpsie	i
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e7fe      	b.n	8005aec <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af4:	6850      	ldr	r0, [r2, #4]
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	4611      	mov	r1, r2
 8005afc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f2c0 80ab 	blt.w	8005c5c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	3304      	adds	r3, #4
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe f9da 	bl	8003ed0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ff6a 	bl	80059f8 <prvSampleTimeNow>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b09      	cmp	r3, #9
 8005b2a:	f200 8098 	bhi.w	8005c5e <prvProcessReceivedCommands+0x1a2>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <prvProcessReceivedCommands+0x78>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b5d 	.word	0x08005b5d
 8005b40:	08005bd3 	.word	0x08005bd3
 8005b44:	08005be7 	.word	0x08005be7
 8005b48:	08005c33 	.word	0x08005c33
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b5d 	.word	0x08005b5d
 8005b54:	08005bd3 	.word	0x08005bd3
 8005b58:	08005be7 	.word	0x08005be7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	18d1      	adds	r1, r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7c:	f7ff ff5c 	bl	8005a38 <prvInsertTimerInActiveList>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d06b      	beq.n	8005c5e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d060      	beq.n	8005c5e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	441a      	add	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2100      	movs	r1, #0
 8005bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bae:	f7ff fe03 	bl	80057b8 <xTimerGenericCommand>
 8005bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d151      	bne.n	8005c5e <prvProcessReceivedCommands+0x1a2>
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	b672      	cpsid	i
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	b662      	cpsie	i
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	e7fe      	b.n	8005bd0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005be4:	e03b      	b.n	8005c5e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <prvProcessReceivedCommands+0x162>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	b672      	cpsid	i
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	b662      	cpsie	i
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e7fe      	b.n	8005c1c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	18d1      	adds	r1, r2, r3
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2c:	f7ff ff04 	bl	8005a38 <prvInsertTimerInActiveList>
					break;
 8005c30:	e015      	b.n	8005c5e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f000 fbb3 	bl	80063ac <vPortFree>
 8005c46:	e00a      	b.n	8005c5e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c5a:	e000      	b.n	8005c5e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <prvProcessReceivedCommands+0x1c0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	1d39      	adds	r1, r7, #4
 8005c64:	2200      	movs	r2, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fc04 	bl	8004474 <xQueueReceive>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f47f af28 	bne.w	8005ac4 <prvProcessReceivedCommands+0x8>
	}
}
 8005c74:	bf00      	nop
 8005c76:	3730      	adds	r7, #48	; 0x30
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000c18 	.word	0x20000c18

08005c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c86:	e049      	b.n	8005d1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c88:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b2c      	ldr	r3, [pc, #176]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe f915 	bl	8003ed0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02f      	beq.n	8005d1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90e      	bls.n	8005cec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7fe f8ba 	bl	8003e5e <vListInsert>
 8005cea:	e017      	b.n	8005d1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cec:	2300      	movs	r3, #0
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fd5e 	bl	80057b8 <xTimerGenericCommand>
 8005cfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <prvSwitchTimerLists+0x9c>
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	b672      	cpsid	i
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	b662      	cpsie	i
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	e7fe      	b.n	8005d1a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1b0      	bne.n	8005c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <prvSwitchTimerLists+0xc8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a04      	ldr	r2, [pc, #16]	; (8005d44 <prvSwitchTimerLists+0xc4>)
 8005d32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <prvSwitchTimerLists+0xc8>)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6013      	str	r3, [r2, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000c10 	.word	0x20000c10
 8005d48:	20000c14 	.word	0x20000c14

08005d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d52:	f000 f941 	bl	8005fd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <prvCheckForValidListAndQueue+0x60>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d120      	bne.n	8005da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d5e:	4814      	ldr	r0, [pc, #80]	; (8005db0 <prvCheckForValidListAndQueue+0x64>)
 8005d60:	f7fe f82c 	bl	8003dbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d64:	4813      	ldr	r0, [pc, #76]	; (8005db4 <prvCheckForValidListAndQueue+0x68>)
 8005d66:	f7fe f829 	bl	8003dbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <prvCheckForValidListAndQueue+0x6c>)
 8005d6c:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <prvCheckForValidListAndQueue+0x64>)
 8005d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <prvCheckForValidListAndQueue+0x70>)
 8005d72:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <prvCheckForValidListAndQueue+0x68>)
 8005d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <prvCheckForValidListAndQueue+0x74>)
 8005d7c:	4a11      	ldr	r2, [pc, #68]	; (8005dc4 <prvCheckForValidListAndQueue+0x78>)
 8005d7e:	2110      	movs	r1, #16
 8005d80:	200a      	movs	r0, #10
 8005d82:	f7fe f939 	bl	8003ff8 <xQueueGenericCreateStatic>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <prvCheckForValidListAndQueue+0x60>)
 8005d8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d8c:	4b07      	ldr	r3, [pc, #28]	; (8005dac <prvCheckForValidListAndQueue+0x60>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <prvCheckForValidListAndQueue+0x60>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	490b      	ldr	r1, [pc, #44]	; (8005dc8 <prvCheckForValidListAndQueue+0x7c>)
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe fd5c 	bl	8004858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005da0:	f000 f94c 	bl	800603c <vPortExitCritical>
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000c18 	.word	0x20000c18
 8005db0:	20000be8 	.word	0x20000be8
 8005db4:	20000bfc 	.word	0x20000bfc
 8005db8:	20000c10 	.word	0x20000c10
 8005dbc:	20000c14 	.word	0x20000c14
 8005dc0:	20000cc4 	.word	0x20000cc4
 8005dc4:	20000c24 	.word	0x20000c24
 8005dc8:	08006690 	.word	0x08006690

08005dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b04      	subs	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b04      	subs	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dfc:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <pxPortInitialiseStack+0x64>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b14      	subs	r3, #20
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3b04      	subs	r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f06f 0202 	mvn.w	r2, #2
 8005e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3b20      	subs	r3, #32
 8005e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	08005e35 	.word	0x08005e35

08005e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <prvTaskExitError+0x58>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d00b      	beq.n	8005e60 <prvTaskExitError+0x2c>
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	b672      	cpsid	i
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	b662      	cpsie	i
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e7fe      	b.n	8005e5e <prvTaskExitError+0x2a>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	b672      	cpsid	i
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	b662      	cpsie	i
 8005e74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e76:	bf00      	nop
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0fc      	beq.n	8005e78 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c

08005e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <pxCurrentTCBConst2>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9a:	f380 8809 	msr	PSP, r0
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	4770      	bx	lr
 8005eac:	f3af 8000 	nop.w

08005eb0 <pxCurrentTCBConst2>:
 8005eb0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005eb8:	4808      	ldr	r0, [pc, #32]	; (8005edc <prvPortStartFirstTask+0x24>)
 8005eba:	6800      	ldr	r0, [r0, #0]
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f380 8808 	msr	MSP, r0
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8814 	msr	CONTROL, r0
 8005eca:	b662      	cpsie	i
 8005ecc:	b661      	cpsie	f
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	df00      	svc	0
 8005ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eda:	bf00      	nop
 8005edc:	e000ed08 	.word	0xe000ed08

08005ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ee6:	4b36      	ldr	r3, [pc, #216]	; (8005fc0 <xPortStartScheduler+0xe0>)
 8005ee8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <xPortStartScheduler+0xe4>)
 8005f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f0e:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f14:	e009      	b.n	8005f2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f16:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4a2a      	ldr	r2, [pc, #168]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b80      	cmp	r3, #128	; 0x80
 8005f34:	d0ef      	beq.n	8005f16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1c3 0307 	rsb	r3, r3, #7
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d00b      	beq.n	8005f5a <xPortStartScheduler+0x7a>
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	b672      	cpsid	i
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	b662      	cpsie	i
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	e7fe      	b.n	8005f58 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <xPortStartScheduler+0xe8>)
 8005f6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <xPortStartScheduler+0xec>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <xPortStartScheduler+0xec>)
 8005f7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <xPortStartScheduler+0xec>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a10      	ldr	r2, [pc, #64]	; (8005fcc <xPortStartScheduler+0xec>)
 8005f8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f90:	f000 f8d4 	bl	800613c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <xPortStartScheduler+0xf0>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f9a:	f000 f8f3 	bl	8006184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <xPortStartScheduler+0xf4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <xPortStartScheduler+0xf4>)
 8005fa4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fa8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005faa:	f7ff ff85 	bl	8005eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fae:	f7ff f869 	bl	8005084 <vTaskSwitchContext>
	prvTaskExitError();
 8005fb2:	f7ff ff3f 	bl	8005e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	e000e400 	.word	0xe000e400
 8005fc4:	20000d14 	.word	0x20000d14
 8005fc8:	20000d18 	.word	0x20000d18
 8005fcc:	e000ed20 	.word	0xe000ed20
 8005fd0:	2000000c 	.word	0x2000000c
 8005fd4:	e000ef34 	.word	0xe000ef34

08005fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	b672      	cpsid	i
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	b662      	cpsie	i
 8005ff2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <vPortEnterCritical+0x5c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <vPortEnterCritical+0x5c>)
 8005ffc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <vPortEnterCritical+0x5c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d110      	bne.n	8006028 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <vPortEnterCritical+0x60>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <vPortEnterCritical+0x50>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	b672      	cpsid	i
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	b662      	cpsie	i
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	e7fe      	b.n	8006026 <vPortEnterCritical+0x4e>
	}
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	2000000c 	.word	0x2000000c
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <vPortExitCritical+0x26>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	b672      	cpsid	i
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	b662      	cpsie	i
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	e7fe      	b.n	8006060 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <vPortExitCritical+0x50>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	4a08      	ldr	r2, [pc, #32]	; (800608c <vPortExitCritical+0x50>)
 800606a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800606c:	4b07      	ldr	r3, [pc, #28]	; (800608c <vPortExitCritical+0x50>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <vPortExitCritical+0x42>
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	2000000c 	.word	0x2000000c

08006090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006090:	f3ef 8009 	mrs	r0, PSP
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <pxCurrentTCBConst>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	f01e 0f10 	tst.w	lr, #16
 80060a0:	bf08      	it	eq
 80060a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060aa:	6010      	str	r0, [r2, #0]
 80060ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060b4:	b672      	cpsid	i
 80060b6:	f380 8811 	msr	BASEPRI, r0
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	b662      	cpsie	i
 80060c4:	f7fe ffde 	bl	8005084 <vTaskSwitchContext>
 80060c8:	f04f 0000 	mov.w	r0, #0
 80060cc:	f380 8811 	msr	BASEPRI, r0
 80060d0:	bc09      	pop	{r0, r3}
 80060d2:	6819      	ldr	r1, [r3, #0]
 80060d4:	6808      	ldr	r0, [r1, #0]
 80060d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060da:	f01e 0f10 	tst.w	lr, #16
 80060de:	bf08      	it	eq
 80060e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060e4:	f380 8809 	msr	PSP, r0
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop

080060f0 <pxCurrentTCBConst>:
 80060f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop

080060f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	b672      	cpsid	i
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	b662      	cpsie	i
 8006112:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006114:	f7fe fefc 	bl	8004f10 <xTaskIncrementTick>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <SysTick_Handler+0x40>)
 8006120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	2300      	movs	r3, #0
 8006128:	603b      	str	r3, [r7, #0]
	__asm volatile
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <vPortSetupTimerInterrupt+0x38>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <vPortSetupTimerInterrupt+0x3c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0a      	ldr	r2, [pc, #40]	; (800617c <vPortSetupTimerInterrupt+0x40>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	099b      	lsrs	r3, r3, #6
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <vPortSetupTimerInterrupt+0x44>)
 800615a:	3b01      	subs	r3, #1
 800615c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800615e:	4b04      	ldr	r3, [pc, #16]	; (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006160:	2207      	movs	r2, #7
 8006162:	601a      	str	r2, [r3, #0]
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	e000e010 	.word	0xe000e010
 8006174:	e000e018 	.word	0xe000e018
 8006178:	20000000 	.word	0x20000000
 800617c:	10624dd3 	.word	0x10624dd3
 8006180:	e000e014 	.word	0xe000e014

08006184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006194 <vPortEnableVFP+0x10>
 8006188:	6801      	ldr	r1, [r0, #0]
 800618a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800618e:	6001      	str	r1, [r0, #0]
 8006190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006192:	bf00      	nop
 8006194:	e000ed88 	.word	0xe000ed88

08006198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800619e:	f3ef 8305 	mrs	r3, IPSR
 80061a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d915      	bls.n	80061d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <vPortValidateInterruptPriority+0x74>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <vPortValidateInterruptPriority+0x78>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	7afa      	ldrb	r2, [r7, #11]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d20b      	bcs.n	80061d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	b672      	cpsid	i
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	b662      	cpsie	i
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	e7fe      	b.n	80061d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061d6:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <vPortValidateInterruptPriority+0x7c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061de:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <vPortValidateInterruptPriority+0x80>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d90b      	bls.n	80061fe <vPortValidateInterruptPriority+0x66>
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	b672      	cpsid	i
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	b662      	cpsie	i
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	e7fe      	b.n	80061fc <vPortValidateInterruptPriority+0x64>
	}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	e000e3f0 	.word	0xe000e3f0
 8006210:	20000d14 	.word	0x20000d14
 8006214:	e000ed0c 	.word	0xe000ed0c
 8006218:	20000d18 	.word	0x20000d18

0800621c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006228:	f7fe fdb6 	bl	8004d98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800622c:	4b5a      	ldr	r3, [pc, #360]	; (8006398 <pvPortMalloc+0x17c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006234:	f000 f916 	bl	8006464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006238:	4b58      	ldr	r3, [pc, #352]	; (800639c <pvPortMalloc+0x180>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 8090 	bne.w	8006366 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01e      	beq.n	800628a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800624c:	2208      	movs	r2, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d015      	beq.n	800628a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f023 0307 	bic.w	r3, r3, #7
 8006264:	3308      	adds	r3, #8
 8006266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <pvPortMalloc+0x6e>
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	b672      	cpsid	i
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	b662      	cpsie	i
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e7fe      	b.n	8006288 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d06a      	beq.n	8006366 <pvPortMalloc+0x14a>
 8006290:	4b43      	ldr	r3, [pc, #268]	; (80063a0 <pvPortMalloc+0x184>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d865      	bhi.n	8006366 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800629a:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <pvPortMalloc+0x188>)
 800629c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800629e:	4b41      	ldr	r3, [pc, #260]	; (80063a4 <pvPortMalloc+0x188>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062a4:	e004      	b.n	80062b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d903      	bls.n	80062c2 <pvPortMalloc+0xa6>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f1      	bne.n	80062a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062c2:	4b35      	ldr	r3, [pc, #212]	; (8006398 <pvPortMalloc+0x17c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d04c      	beq.n	8006366 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2208      	movs	r2, #8
 80062d2:	4413      	add	r3, r2
 80062d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	1ad2      	subs	r2, r2, r3
 80062e6:	2308      	movs	r3, #8
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d920      	bls.n	8006330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <pvPortMalloc+0xfc>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	b672      	cpsid	i
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	b662      	cpsie	i
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	e7fe      	b.n	8006316 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800632a:	69b8      	ldr	r0, [r7, #24]
 800632c:	f000 f8fc 	bl	8006528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <pvPortMalloc+0x184>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <pvPortMalloc+0x184>)
 800633c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <pvPortMalloc+0x184>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <pvPortMalloc+0x18c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d203      	bcs.n	8006352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <pvPortMalloc+0x184>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <pvPortMalloc+0x18c>)
 8006350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <pvPortMalloc+0x180>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	431a      	orrs	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006366:	f7fe fd25 	bl	8004db4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <pvPortMalloc+0x170>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	b672      	cpsid	i
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	b662      	cpsie	i
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e7fe      	b.n	800638a <pvPortMalloc+0x16e>
	return pvReturn;
 800638c:	69fb      	ldr	r3, [r7, #28]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	; 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20004924 	.word	0x20004924
 800639c:	20004930 	.word	0x20004930
 80063a0:	20004928 	.word	0x20004928
 80063a4:	2000491c 	.word	0x2000491c
 80063a8:	2000492c 	.word	0x2000492c

080063ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d04a      	beq.n	8006454 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063be:	2308      	movs	r3, #8
 80063c0:	425b      	negs	r3, r3
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <vPortFree+0xb0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <vPortFree+0x46>
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	b672      	cpsid	i
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	b662      	cpsie	i
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e7fe      	b.n	80063f0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <vPortFree+0x66>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	b672      	cpsid	i
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	b662      	cpsie	i
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	e7fe      	b.n	8006410 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <vPortFree+0xb0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d019      	beq.n	8006454 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d115      	bne.n	8006454 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <vPortFree+0xb0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	43db      	mvns	r3, r3
 8006432:	401a      	ands	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006438:	f7fe fcae 	bl	8004d98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <vPortFree+0xb4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4413      	add	r3, r2
 8006446:	4a06      	ldr	r2, [pc, #24]	; (8006460 <vPortFree+0xb4>)
 8006448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f000 f86c 	bl	8006528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006450:	f7fe fcb0 	bl	8004db4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20004930 	.word	0x20004930
 8006460:	20004928 	.word	0x20004928

08006464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800646a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800646e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <prvHeapInit+0xac>)
 8006472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3307      	adds	r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <prvHeapInit+0xac>)
 8006494:	4413      	add	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <prvHeapInit+0xb0>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <prvHeapInit+0xb0>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064b0:	2208      	movs	r2, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <prvHeapInit+0xb4>)
 80064c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064c6:	4b14      	ldr	r3, [pc, #80]	; (8006518 <prvHeapInit+0xb4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2200      	movs	r2, #0
 80064cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ce:	4b12      	ldr	r3, [pc, #72]	; (8006518 <prvHeapInit+0xb4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <prvHeapInit+0xb4>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <prvHeapInit+0xb8>)
 80064f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <prvHeapInit+0xbc>)
 80064fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <prvHeapInit+0xc0>)
 80064fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000d1c 	.word	0x20000d1c
 8006514:	2000491c 	.word	0x2000491c
 8006518:	20004924 	.word	0x20004924
 800651c:	2000492c 	.word	0x2000492c
 8006520:	20004928 	.word	0x20004928
 8006524:	20004930 	.word	0x20004930

08006528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006530:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <prvInsertBlockIntoFreeList+0xac>)
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e002      	b.n	800653c <prvInsertBlockIntoFreeList+0x14>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d8f7      	bhi.n	8006536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	d108      	bne.n	800656a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	441a      	add	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	441a      	add	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d118      	bne.n	80065b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d00d      	beq.n	80065a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e008      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvInsertBlockIntoFreeList+0xb0>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e003      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d002      	beq.n	80065c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	2000491c 	.word	0x2000491c
 80065d8:	20004924 	.word	0x20004924

080065dc <__libc_init_array>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0d      	ldr	r6, [pc, #52]	; (8006614 <__libc_init_array+0x38>)
 80065e0:	4c0d      	ldr	r4, [pc, #52]	; (8006618 <__libc_init_array+0x3c>)
 80065e2:	1ba4      	subs	r4, r4, r6
 80065e4:	10a4      	asrs	r4, r4, #2
 80065e6:	2500      	movs	r5, #0
 80065e8:	42a5      	cmp	r5, r4
 80065ea:	d109      	bne.n	8006600 <__libc_init_array+0x24>
 80065ec:	4e0b      	ldr	r6, [pc, #44]	; (800661c <__libc_init_array+0x40>)
 80065ee:	4c0c      	ldr	r4, [pc, #48]	; (8006620 <__libc_init_array+0x44>)
 80065f0:	f000 f82c 	bl	800664c <_init>
 80065f4:	1ba4      	subs	r4, r4, r6
 80065f6:	10a4      	asrs	r4, r4, #2
 80065f8:	2500      	movs	r5, #0
 80065fa:	42a5      	cmp	r5, r4
 80065fc:	d105      	bne.n	800660a <__libc_init_array+0x2e>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006604:	4798      	blx	r3
 8006606:	3501      	adds	r5, #1
 8006608:	e7ee      	b.n	80065e8 <__libc_init_array+0xc>
 800660a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800660e:	4798      	blx	r3
 8006610:	3501      	adds	r5, #1
 8006612:	e7f2      	b.n	80065fa <__libc_init_array+0x1e>
 8006614:	080066dc 	.word	0x080066dc
 8006618:	080066dc 	.word	0x080066dc
 800661c:	080066dc 	.word	0x080066dc
 8006620:	080066e0 	.word	0x080066e0

08006624 <memcpy>:
 8006624:	b510      	push	{r4, lr}
 8006626:	1e43      	subs	r3, r0, #1
 8006628:	440a      	add	r2, r1
 800662a:	4291      	cmp	r1, r2
 800662c:	d100      	bne.n	8006630 <memcpy+0xc>
 800662e:	bd10      	pop	{r4, pc}
 8006630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006638:	e7f7      	b.n	800662a <memcpy+0x6>

0800663a <memset>:
 800663a:	4402      	add	r2, r0
 800663c:	4603      	mov	r3, r0
 800663e:	4293      	cmp	r3, r2
 8006640:	d100      	bne.n	8006644 <memset+0xa>
 8006642:	4770      	bx	lr
 8006644:	f803 1b01 	strb.w	r1, [r3], #1
 8006648:	e7f9      	b.n	800663e <memset+0x4>
	...

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
